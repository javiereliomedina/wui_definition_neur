[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How to approach the definition of WUI in northern Europe",
    "section": "",
    "text": "1 Preface\nData have been analysed with R (version 4.3.2) and Rstudio, and the book has been created with Quarto.\nR session {.unnumbered}\n\n\nR version 4.3.2 (2023-10-31 ucrt)\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: Europe/Oslo\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.3.2    fastmap_1.2.0     cli_3.6.3        \n [5] htmltools_0.5.8.1 tools_4.3.2       rstudioapi_0.16.0 yaml_2.3.10      \n [9] rmarkdown_2.28    knitr_1.48        jsonlite_1.8.8    xfun_0.47        \n[13] digest_0.6.37     rlang_1.1.4       renv_1.0.7        evaluate_0.24.0",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Preface</span>"
    ]
  },
  {
    "objectID": "article.html",
    "href": "article.html",
    "title": "2  Aricle",
    "section": "",
    "text": "Abstract\nThis paper aims to delineate the wildland-urban interface in the sparsely populated, limited resourced Atlantic-Boreal Europe. Due to its demographic and biophysical differences to southern Europe, as well as to other fire-prone regions, current WUI definitions to suit the needs of southern countries are not viable. Therefore, common WUI mapping assumptions, and how well the resulting WUI maps (thresholds) capture the reality of wildfire in northern Europe, are scoped.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Aricle</span>"
    ]
  },
  {
    "objectID": "article.html#acknowledgements",
    "href": "article.html#acknowledgements",
    "title": "2  Aricle",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nThis work has been financed by XXX",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Aricle</span>"
    ]
  },
  {
    "objectID": "article_codes.html",
    "href": "article_codes.html",
    "title": "3  R scripts",
    "section": "",
    "text": "3.1 Functions\nIn addition to the packages, we define our own functions for the analysis:\nShow the code\n#' Function: get_perc_veg_buffer ----\n#' Function for calculating if the percentage of vegetation within a buffer area is higher than a threshold \n#' @description It returns a raster indicating if the percentage of flammable vegetation within a circumference, from the centre of the grid (buffer), higher than a threshold (YES = 1, NO = 0)\n#' @param .veg raster layer indicating if the vegetation is considered as fuel or not (YES = 1, NO = 0). \n#' @param .radio_buffer Radio of the circumference.\n#' @param .threshold Proportion: from 0-1 (default  = 0.5; i.e., 50%) \nget_perc_veg_buffer &lt;- function(.veg,\n                                .radio_buffer,\n                                .threshold = 0.5){\n  \n  # Percentage-vegetation \n  fwm &lt;- terra::focalMat(.veg, d = radio_buffer, type = \"circle\", fillNA = TRUE)\n  focal_perc &lt;- terra::focal(.veg, w = fwm, fun = \"sum\", na.rm = TRUE) \n  \n  # Higher than threshold (YES = 1, No = 0)\n  wv_perc &lt;- focal_perc\n  wv_perc[wv_perc &lt;  .threshold] &lt;- 0\n  wv_perc[wv_perc &gt;= .threshold] &lt;- 1\n  \n  return(wv_perc)\n  \n} \n\n#' Function: get_large_polygons ----\n#' Function for removing small areas from a raster file. Used for calculating large forest areas (e.g., &gt; 5 km2).  \n#' @description It returns a raster with all the polygons larger than a minimal area (YES = 1, NO = 0)\n#' @param .x starts object (i.e., 1 - fuel vegetation, 0 - no fuel vegetation). \n#' @param .min_area Minimum area [in km2] for considering an vegetated area as large  (Default 5 km^2)\n#' @param .resolution Resolution of the final raster (default - 100 x 100 m)\nget_large_polygons &lt;- function(.x,               \n                               .min_area = 5,    \n                               .resolution = 100) {\n  \n  df_v &lt;- .x |&gt; \n    # Convert to polygons\n    st_as_sf(as_points = FALSE, merge = TRUE) %&gt;% \n    # Calculate the area of the polygons\n    mutate(area = units::set_units(st_area(.), \"km2\")) |&gt; \n    # Remove lower than 5 km2\n    filter(area &gt; units::set_units(.min_area, \"km2\")) |&gt; \n    # Set columns names\n    setNames(c(\"large_wild_veg\", \"geometry\", \"area\")) |&gt; \n    # Remove area column\n    select(-area) |&gt; \n    # transform to SpatVector  \n    vect() |&gt; \n    # aggregate in one polygon\n    aggregate(by = \"large_wild_veg\") |&gt; \n    select(large_wild_veg)\n  \n  # Rasterize\n  df_geom &lt;- rast(df_v, resolution = .resolution)\n  df_r &lt;- rasterize(df_v, df_geom)\n  \n  return(df_r)\n  \n}\n\n#' get_dist_max ----\n#' Get cells within a distance to vegetated area (YES --&gt; 1; NO --&gt; 0)  \n#' @description It returns a raster with indicating the cells that are within the distance to the vegetated areas (YES = 1, NO = 0)\n#' @param .x Raster with distances (from `terra::distance`) \n#' @param .max_distance Maximum distance in [m] (e.g., 2400 m)\nget_dist_max &lt;- function(.x, .max_dist) {\n  \n  dist &lt;- .x\n  dist[dist &lt;= .max_dist] &lt;- 1\n  dist[dist &gt;  .max_dist] &lt;- 0\n  \n  return(dist)\n  \n}\n\n#' Function: get_wui_raster ----\n#' Function for WUI classification\n#' @description it returns a raster with WUI areas (Interface or Intermix)\n#' @param .veg_perc raster layer indicating if the percentage of vegetation in\n#' the buffer area is higher than a threshold (e.g., &gt; 50%). (YES = 1, NO = 0). \n#' @param .veg_dist raster layer indicating if the a grid cell is within a \n#' distance (e.g., 2.4 km) of a large area of flammable vegetation (YES = 1, NO = 0)\n#' @param .pot_wui raster layer with potential WUI grids based on building density (`wui_potential`).\n#' @param .region SpatVector layer with the region area (`region_v`) \nget_wui_raster &lt;- function(.veg_perc,\n                           .veg_dist,\n                           .pot_wui = wui_potential,\n                           .region = region_v){\n\n  # Potential WUI grid ----\n  wui_potential &lt;- .pot_wui\n  wui_potential &lt;- as.factor(wui_potential)\n  \n  # Match extents\n  perc &lt;- resample(.veg_perc, wui_potential, method = \"mode\")\n  dist &lt;- resample(.veg_dist, wui_potential, method = \"mode\")\n  \n  # Intermix \n  wui &lt;- perc + wui_potential # 2 = WUI intermix\n  wui[wui == 1] &lt;- 0          # 1 = Potential interface --&gt; 0\n  \n  # Interface \n  wui &lt;- wui + dist\n  wui[wui == 0] &lt;- NA # No WUI\n  wui[wui == 1] &lt;- 1  # Interface\n  wui[wui == 2] &lt;- 2  # Intermix\n  wui[wui == 3] &lt;- 2  # Intermix\n  \n  # NAs as 0 inside the study area (otherwise NA)\n  wui &lt;- ifel(is.na(wui), 0, wui)\n  \n  # Mask to region (e.g., NA = ourside norway)\n  wui &lt;- terra::mask(wui, .region)\n  \n  # Identify levels (1 = Interface, 2 = Intermix)\n  levels(wui) &lt;- data.frame(id = 0:2,\n                            wui_class = c(\"No_wui\", \"Interface\", \"Intermix\")\n                            )\n  \n  # Add colour table \n  coltab(wui) &lt;- data.frame(id = 0:2, \n                            col = c(\"#FAFAFA\", \"#FF6633\", \"#003366\"))\n  \n  \n  # Return SpatRaster\n  set.values(wui)\n  return(wui)\n  \n}\n\n#' add_colours_wui \n#' Function for adding WUI colours in a SpatRaster \n#' @description Add colours to a WUI raster layer (No_WUI, Interface, Intermix)\n#' @param .veg_perc raster layer indicating if the percentage of vegetation in\nadd_colours_wui &lt;- function(.x) {\n  \n  r &lt;- .x\n  # Identify levels (1 = Interface, 2 = Intermix)\n  df_lev &lt;- data.frame(id = 0:2, wui_class = c(\"No_wui\", \"Interface\", \"Intermix\"))\n  df_lev_lst &lt;- replicate(nlyr(r), df_lev, simplify = FALSE)\n  levels(r) &lt;- df_lev_lst\n  # Add colour table \n  df_col &lt;- data.frame(id = 0:2, col = c(\"lightgrey\", \"#FF6633\", \"#003366\"))\n  df_col_lst &lt;- replicate(nlyr(r), df_col, simplify = FALSE)\n  coltab(r) &lt;- df_col_lst\n  \n  return(r)\n  \n}",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R scripts</span>"
    ]
  },
  {
    "objectID": "article_codes.html#data-preprocessing",
    "href": "article_codes.html#data-preprocessing",
    "title": "3  R scripts",
    "section": "3.2 Data preprocessing",
    "text": "3.2 Data preprocessing\n\n3.2.1 Parameter\n\n\nShow the code\nraster_resolution &lt;- 250 # m\nradio_buffer &lt;- 500 # m\narea_buffer &lt;- pi * (radio_buffer/1000)^2 # km2\n\n\nAt national scale, we have performed a raster analysis by grids cells of 250 m x 250 m.\n\n\n3.2.2 Study area\nWe load the last release of the county data from GISCO (year = 2021), with a resolution of 1:1 million and crs= 3035 (Figure 3.1). Due to size of the file, we perform the analysis by tiles.\n\n\nShow the code\n# Create local directory for caching big files\ndir.create(\"C:/GISCO_spatial_data\")\noptions(gisco_cache_dir = \"C:/GISCO_spatial_data\")\n\n# Counties ----\ncountry_list &lt;- c(\"NO\", \"SE\")\ncounties &lt;- giscoR::gisco_get_nuts(country = country_list,\n                                   year = \"2021\",\n                                   nuts_level = 3,\n                                   epsg = \"3035\",\n                                   resolution = \"01\") |&gt; \n  filter(NUTS_NAME != \"Svalbard\") |&gt; \n  filter(NUTS_NAME != \"Jan Mayen\") |&gt; \n  select(NUTS_ID, NUTS_NAME, CNTR_CODE)\n\n# Study region (SF object) ----\nregion_sf &lt;- counties |&gt; \n  summarize()\n\ncountry_sf &lt;- counties |&gt;\n  group_by(CNTR_CODE) |&gt; \n  summarize()\n\n# # Rogaland ----\n# rogaland &lt;- counties |&gt; \n#   filter(NUTS_NAME == \"Rogaland\")\n\n# Transform to terra::SpatVector (region_v) and SpatRaster (region_r)) -----\nregion_v &lt;- vect(region_sf)\ngeometry_raster &lt;- rast(region_v, resolution = raster_resolution)\nregion_r &lt;- rasterize(region_v, geometry_raster)\n\nno_v &lt;- country_sf |&gt; \n  filter(CNTR_CODE == \"NO\") |&gt; \n  vect()\n\nse_v &lt;- country_sf |&gt; \n  filter(CNTR_CODE == \"SE\") |&gt; \n  vect()\n\n# Tiles \nraster_tiles &lt;- rast(nrows = 15,\n                     ncols = 15,\n                     ext(region_r),\n                     crs = \"EPSG:3035\")\n\ndir.create(\"data/processed_data\")\ndir.create(\"data/processed_data/tiles\")\ndir.create(\"data/processed_data/tiles/region\")\n\nregion_tiles &lt;- makeTiles(\n  x = region_r,\n  y = raster_tiles,\n  filename = \"data/processed_data/tiles/region/region_r_.tif\",\n  na.rm = TRUE,\n  extend = TRUE\n)\n\nregion_vrt &lt;- vrt(region_tiles)\n\n# Plot Study area ----\n\n# world \nworld &lt;- rworldmap::getMap(resolution = \"high\") |&gt; \n  st_as_sf() |&gt; \n  st_transform(crs = 3035) \n\np1 &lt;- ggplot() +\n  geom_sf(data = world) +\n  geom_sf(data = country_sf, fill = c(\"#D55E00\", \"#4E84C4\")) +\n  coord_sf(xlim = c(2500000, 5402285),\n           ylim = c(1250000, 5500000),\n           expand = FALSE) +\n  theme_bw() +\n  theme(panel.background = element_rect(fill = \"lightgrey\")) +\n  theme(panel.grid = element_blank(),\n        axis.text  = element_blank(),\n        axis.ticks = element_blank()) \n  \np2 &lt;- ggplot() +\n  geom_sf(data = region_sf, fill = \"#52854C\") +\n  geom_sf(data = country_sf, fill = NA) +\n  theme_bw() \n\np2 + inset_element(p1, 0.03, 0.70, 0.6, 0.95, align_to = 'full')\n\n\n\n\n\n\n\n\nFigure 3.1: Study area (Norway and Sweden)\n\n\n\n\n\n\n\n3.2.3 Building density\nWe have downloaded the building data from OpenStreetMaps (geofabrik: link), in pbf format. The version of the datasets are:\n\n\n\nName\nLast modified\nSize\n\n\nnorway-latest-osm.pbf\n2023-08-17 04:37\n1.2G\n\n\nsweden-latest-osm.pbf\n2023-11-16 04:50\n656M\n\n\n\nThey are big files and we have not put them on GitHub. If you wanted to replicate the document, you would need to download the file and save it with the same path as here, or change the path in the code (NOTE: you may have small differences in the results if OSM updates the data). To calculate the building density we do the following steps:\n\nTransform the .pbf file to .gpkg, extracting only multipolygons (run only one time)\nRead building polygons\nCalculate the centroid of each building, assigning a value of 1 to the building (building = 1)\nCalculate the building density in a grid cell of 250 m x 250 m (it is done by tiles). It is the sum of all the buildings (building = 1) within a grid cell\nMerge all tiles in one raster (terra::mosaic)\nSmooth the data with a circular moving window of 500 m; i.e., buffer area (terra::focal)\nThe density building of a grid cell is therefore the number of buildings in the buffer area divided by the area of the buffer. Potential WUI areas are those grid cells with a building density higher than 6.17 #/km^2\n\n\n\nShow the code\n# # Transform OSM data to gpkg (only buildings) -- RUN ONLY ONCE \n# osm_no_pbf &lt;- \"data/big_data/OSM/norway-latest.osm.pbf\"\n# osm_no_building_gpkg &lt;- osmextract::oe_vectortranslate(osm_pbf,\n#                                                 layer = \"multipolygons\")\n\n# # Transform OSM data to gpkg (only buildings) -- RUN ONLY ONCE\n# osm_se_pbf &lt;- \"data/big_data/OSM/sweden-latest.osm.pbf\"\n# osm_se_building_gpkg &lt;- osmextract::oe_vectortranslate(osm_se_pbf,\n#                                                 layer = \"multipolygons\")\n\n#' Function for getting buildings counts from OSM\n#' @description Read only buildings from OSM.gpkg file (by tiles) and calculate building density\n#' @param .tile_path Tiles where building counts should be calculated \n#' @param .data_path path to folder with OSM data (.gpkg format) \nget_building_counts &lt;- function(.tile_path,\n                                .data_path = \"data/big_data/OSM\"){ \n  \n  # read tile\n  tile &lt;- terra::rast(.tile_path)\n  files &lt;- list.files(.data_path,\n                      pattern=\"*.gpkg\",\n                      full.names = TRUE)\n  \n  # Get bounding box tile\n  wkt_tile &lt;- tile |&gt;\n    terra::project(\"EPSG:4326\") |&gt; \n    terra::ext() |&gt; \n    terra::vect() |&gt;\n    terra::geom(wkt = TRUE) \n  \n  # Calculate number buildings\n  bd &lt;- lapply(files, function(.x) { sf::read_sf(.x, wkt_filter = wkt_tile) }) |&gt;  \n    dplyr::bind_rows() |&gt; \n    tidyr::drop_na(building) |&gt; \n    dplyr::select(building) |&gt;\n    sf::st_transform(crs = 3035) |&gt; \n    sf::st_centroid() |&gt; \n    dplyr::mutate(building = 1) |&gt; \n    terra::vect() |&gt; \n    terra::rasterize(tile, fun = sum) \n  \n  return(bd)\n  \n}\n\n# Building density ----\nbuild_counts &lt;- region_tiles %&gt;%\n  # Density by tiles\n  map(get_building_counts) |&gt; \n  # Merge tiles\n  sprc() |&gt; \n  mosaic(fun = \"mean\")\nterra::writeRaster(build_counts, \n                   \"data/processed_data/build_counts.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Focal (Smooth values) ----\n# Number of buildings in a circle\nfwm &lt;- focalMat(build_counts, d = radio_buffer, type = \"circle\", fillNA = TRUE)\nfwm[fwm &gt; 0] &lt;- 1\nbuild_focal &lt;- focal(build_counts, w = fwm, fun = sum , na.rm = TRUE)\nterra::writeRaster(build_focal, \n                   \"data/processed_data/build_focal.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n\n\n\nShow the code\n# Read data\nbuild_counts &lt;- terra::rast(\"data/processed_data/build_counts.tif\")\nbuild_focal &lt;- terra::rast(\"data/processed_data/build_focal.tif\")\n\n# Plot ----\np1 &lt;- ggplot() +\n  tidyterra::geom_spatvector(data = region_v, fill = \"white\") +\n  tidyterra::geom_spatraster(data = build_counts) +\n  scale_fill_whitebox_c(name = \"N. Buildings\",\n                        palette = \"viridi\",\n                        trans = \"log10\") +\n  labs(title = \"Original data from OSM\") +\n  theme_void()\n\np2 &lt;- ggplot() +\n  tidyterra::geom_spatvector(data = region_v, fill = \"white\") +\n  tidyterra::geom_spatraster(data = build_focal) +\n  scale_fill_whitebox_c(name = \"N. Buildings\",\n                        palette = \"viridi\",\n                        trans = \"log10\") +\n   labs(title = \"Focal values (circular window)\") +\n  theme_void()\n\np1 + p2 \n\n\n\n\n\n\n\n\nFigure 3.2: Number of buildings per grid cells of 250 m x 250 m\n\n\n\n\n\n\n\n3.2.4 Fuel/vegetation maps\n\n3.2.4.1 EFFIS Fuel Map\nThe EFFIS Fuel Map (EFFIS (2017)) is a pan-European map that classifies the vegetation in 10 categories according to the fire behaviour models developed by Anderson, 1982 (Anderson (1982)) (i.e., it excludes the last 3 categorise of the model). Resolution 250 x 250 m.\nWe remove small polygons (lower than 5 km2), and calculate the distance from each grid cell to the nearest large wild vegetation. Then, we calculate the grids that are within 2.4 km (value = 1) or not (value = 0).\nWe also calculate the percentage of vegetation in the buffer area (*_wv_per). In the study region, there are only 8 EFFIS categories (Figure 3.3).\n\n\nShow the code\n# # Dowload and unzip data (RUN once)\n# effis_fuel_url &lt;- \"https://effis-gwis-cms.s3-eu-west-1.amazonaws.com/effis/applications/data-and-services/FuelMap_LAEA.zip\"\n# dir.create(\"data/big_data/EFFIS\")\n# download.file(effis_fuel_url, \"data/big_data/EFFIS/FuelMap.zip\")\n# unzip(zipfile = \"data/big_data/EFFIS/FuelMap.zip\",\n#       exdir = \"data/big_data/EFFIS\")\n\n# Forest layer norway\neffis_fuel_path &lt;- \"data/big_data/EFFIS/FuelMap2000_NFFL_LAEA.tif\"\neffis_fuel &lt;- rast(effis_fuel_path) |&gt; \n  crop(region_v) |&gt; \n  mask(region_v)\n\n# Wildland vegetation\neffis_wild_veg &lt;- effis_fuel\neffis_wild_veg[effis_wild_veg &gt;= 1] &lt;- 1\nnames(effis_wild_veg) &lt;- \"wild_veg\"\nterra::writeRaster(effis_wild_veg, \n                   \"data/processed_data/effis_wild_veg.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE) \n\n# Large forest areas (&gt; 5km2)\neffis_wild_veg_large &lt;- stars::read_stars(\"data/processed_data/effis_wild_veg.tif\") |&gt; \n  get_large_polygons() \nterra::writeRaster(effis_wild_veg_large, \n                   \"data/processed_data/effis_wild_veg_large.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Distances to large vegetated areas ----\neffis_wild_veg_large_dist &lt;- terra::distance(effis_wild_veg_large)\nterra::writeRaster(effis_wild_veg_large_dist, \n                   \"data/processed_data/effis_wild_veg_large_dist.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Percentage-vegetation \neffis_wv_perc &lt;- get_perc_veg_buffer(\n  .veg = effis_wild_veg,\n  .radio_buffer = radio_buffer)\nterra::writeRaster(effis_wv_perc, \n                   \"data/processed_data/effis_wv_perc.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Plot ----\neffis_wild_veg_list_no &lt;- tribble(~code, ~cover_class, ~RGB,\n                               1, \"Short grass\",    \"16-240-96\",\n                               3, \"Tall grass\", \"16-128-16\",\n                               5, \"Brush\",  \"255-255-0\",\n                               6, \"Dormant brush\", \"255-204-0\",\n                               7, \"Southern rough\", \"255-102-0\",\n                               8, \"Closed timber litter\", \"192-128-64\",\n                               9, \"Hardwood litter\", \"160-64-0\",\n                               10, \"Timber\", \"112-48-48\") |&gt;\n  separate(RGB, c(\"red\", \"green\", \"blues\"), sep = \"-\") |&gt;  \n  mutate(rgb_code = rgb(red, green, blues, maxColorValue = 255))\n\n# Plot\neffis_fuel_cls &lt;- effis_fuel\ncls &lt;- data.frame(id = effis_wild_veg_list_no$code, \n                  value = effis_wild_veg_list_no$cover_class)\nlevels(effis_fuel_cls) &lt;- cls\n\nplot(region_r, col = \"lightgrey\", axes = FALSE, legend = FALSE)\nplot(effis_fuel_cls, \n     col = effis_wild_veg_list_no$rgb_code,\n     axes = FALSE, add = T)\n\n\n\n\n\n\n\n\nFigure 3.3: Wildland vegetation in Norway by type of vegetation (Source EFFIS Fuel Map)\n\n\n\n\n\n\n\nShow the code\n# Read Effis data\neffis_wild_veg &lt;- terra::rast(\"data/processed_data/effis_wild_veg.tif\")\n\n# Get cells within 2400 m (YES --&gt; 1; NO --&gt; 0)\ndist_path &lt;- \"data/processed_data/effis_wild_veg_large_dist.tif\"\neffis_wild_veg_large_dist_2400 &lt;- terra::rast(dist_path) |&gt; \n  get_dist_max(2400)\n\n# Plot\npar(mfrow = c(1,2), adj = 0)\n\n# Wildand vegetation (Yes = 1, No = NA)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(effis_wild_veg, col = \"#009E73\", axes = F, legend = F, add = T)\ntitle(\"A)\", adj = 0)\n# Within a distance of 2.4 km (Yes = 1, No = 0)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(effis_wild_veg_large_dist_2400, col = c(NA, \"#0072B2\"), axes = F, legend = F, add = T)\ntitle(\"B)\", adj = 0)\n\n\n\n\n\n\n\n\nFigure 3.4: a) Wildland vegetation in Norway, and b) grid cells within a distance to large vegetation areas (&gt;5km2) of 2.4 km (Source EFFIS Fuel Map)\n\n\n\n\n\n\n\n3.2.4.2 Corine Land Cover\nWe have used the Corine Land Cover 2018 (Version 2020_20u1), downloaded from Copernicus. The resolution of the raster is 100 m x 100 m. We classify as potential wildland vegetation the following classes ?fig-corine-wild-vegetation:\n\n311: Broad-leaved forest\n312: Coniferous forest\n313: Mixed forest\n321: Natural grassland\n322: Moors and heathland\n323: Sclerophyllous vegetation\n324: Transitional woodland-shrub\n\n\n\nShow the code\n# Load data ----\nclc2018_path &lt;- \"data/big_data/corine/DATA/U2018_CLC2018_V2020_20u1.tif\" \n\nclc2018_r &lt;- rast(clc2018_path) |&gt; \n  crop(region_v) |&gt; \n  mask(region_v)\n\n# Get Wildland vegetation ----\nclc2018_wild_veg_list &lt;- tribble(~CODE_18, ~LABEL3, ~RGB,\n                                 311,   \"Broad-leaved forest\",  \"128-255-000\",\n                                 312,   \"Coniferous forest\",    \"000-166-000\",\n                                 313,   \"Mixed forest\", \"077-255-000\",\n                                 321,   \"Natural grasslands\",   \"204-242-077\",\n                                 322,   \"Moors and heathland\",  \"166-255-128\",\n                                 323,   \"Sclerophyllous vegetation\", \"166-230-077\",\n                                 324,   \"Transitional woodland-shrub\",  \"166-242-000\") |&gt;\n  separate(RGB, c(\"red\", \"green\", \"blues\"), sep = \"-\") |&gt;  \n  mutate(rgb_code = rgb(red, green, blues, maxColorValue = 255))\n\n# Subset target vegetation\ncorine_fuel_veg &lt;- clc2018_r |&gt; \n  terra::subst(clc2018_wild_veg_list$LABEL3, clc2018_wild_veg_list$LABEL3, others = NA) |&gt; \n  droplevels() \n\n# Wildland vegetation: yes --&gt; 1 \ncorine_wild_veg &lt;- as.int(corine_fuel_veg)\ncorine_wild_veg[corine_wild_veg &gt; 0] &lt;- 1\n# Remove colours associated with the rasters\ncoltab(corine_wild_veg) &lt;- NULL\nnames(corine_wild_veg) &lt;- \"wild_veg\"\nterra::writeRaster(corine_wild_veg, \n                   \"data/processed_data/corine_wild_veg.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Large forest areas (&gt; 5km2)\ncorine_wild_veg_large &lt;- stars::read_stars(\"data/processed_data/corine_wild_veg.tif\") |&gt; \n  get_large_polygons() \nterra::writeRaster(corine_wild_veg_large, \n                   \"data/processed_data/corine_wild_veg_large.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Distances to large vegetated areas ----\nset.values(corine_wild_veg_large)\ncorine_wild_veg_large_dist &lt;- terra::distance(corine_wild_veg_large)\nterra::writeRaster(corine_wild_veg_large_dist, \n                   \"data/processed_data/corine_wild_veg_large_dist.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Percentage-vegetation ----\ncorine_wv_perc &lt;- get_perc_veg_buffer(\n  .veg = corine_wild_veg,\n  .radio_buffer = radio_buffer)\nterra::writeRaster(corine_wv_perc, \n                   \"data/processed_data/corine_wv_perc.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Plot ----\nplot(region_r, col = \"lightgrey\", axes = FALSE, legend = FALSE)\nplot(corine_fuel_veg, col = clc2018_wild_veg_list$rgb_code, \n     axes = FALSE, add = T)\n\n\n\n\n\n\n\n\nFigure 3.5: Wildland vegetation in Norway by type of vegetation (Source CORINE)\n\n\n\n\n\n\n\nShow the code\n# Read CORINE data\ncorine_wild_veg &lt;- terra::rast(\"data/processed_data/corine_wild_veg.tif\")\n\n# Get cells within 2400 m (YES --&gt; 1; NO --&gt; 0)\ndist_path &lt;- \"data/processed_data/corine_wild_veg_large_dist.tif\"\ncorine_wild_veg_large_dist_2400 &lt;- terra::rast(dist_path) |&gt; \n  get_dist_max(2400)\n\n\n# Plot\npar(mfrow = c(1,2), adj = 0)\n\n# Wildland vegetation (Yes = 1, No = NA)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(corine_wild_veg, col = \"#009E73\", axes = F, legend = F, add = T)\ntitle(\"A)\", adj = 0)\n# Within a distance of 2.4 km (Yes = 1, No = 0)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(corine_wild_veg_large_dist_2400, col = c(NA, \"#0072B2\"), axes = F, legend = F, add = T)\ntitle(\"B)\", adj = 0)\n\n\n\n\n\n\n\n\nFigure 3.6: a) Wildland vegetation in Norway, and b) grid cells within a distance to large vegetation areas (&gt;5km2) of 2.4 km (Source CORINE)\n\n\n\n\n\n\n\n3.2.4.3 National datasets\n\n3.2.4.3.1 Norwegian Forest resource map - SR16\nWe downloaded the Norwegian Forest Resource map (Skogressurskart: SR16 - raster format: resolution 16 m) from NIBIO. We downloaded the raster data by county (Fylke) in EUREF89 UTM 33, 2d (25833). There are multiple raster files but we only used the dominant tree species (SRTRESLAG), which is classified in three categories:\n- gran - spruce: 1\n- furu - pine: 2\n- lauv - deciduous: 3\nWe consider all of them as wildland vegetation (we reclassified the raster as 1 = wildland vegetation, and 0 = No wildland vegetation).\nWe aggregate the data by a factor of 6.25, so we past from an original resolution of 16x16 meters to 100x100 meters.\n\n\nShow the code\n# Vegetation layer norway ----\nsr16r_path &lt;- list.files(\"data/big_data/sr16/srtreslag\",\n                         pattern = \"*.tif\",\n                         full.names = TRUE)\nsr16_r &lt;- map(sr16r_path, rast)\n\n# Wildland vegetation\nget_wild_veg &lt;- function(.x){\n    r &lt;- .x\n    r[r &gt;= 1] &lt;- 1 \n    return(r)\n  }\nsr16_wild_veg &lt;-  map(sr16_r, get_wild_veg) \n  \n# Aggregate \nchange_resolution &lt;- function(.x, .fact = 6.25) {\n  aggregate(.x, fact = .fact, fun = \"modal\") \n}\n\nsr16_wild_veg &lt;- map(sr16_wild_veg, change_resolution)\n\n# Merge rasters\nsr16_wild_veg &lt;- sr16_wild_veg |&gt; \n  sprc() |&gt; \n  mosaic(fun = \"max\") |&gt; \n  project(\"EPSG:3035\", method = \"near\")\n\n# Export as .tif\nset.values(sr16_wild_veg)\nnames(sr16_wild_veg) &lt;- \"wild_veg\"\nterra::writeRaster(sr16_wild_veg,\n                   \"data/processed_data/sr16_wild_veg.tif\", \n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Large forest areas (&gt; 5km2)\nsr16_wild_veg_large &lt;- stars::read_stars(\"data/processed_data/sr16_wild_veg.tif\") |&gt;   get_large_polygons() \nset.values(sr16_wild_veg_large)\nterra::writeRaster(sr16_wild_veg_large, \n                   \"data/processed_data/sr16_wild_veg_large.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Distances to large vegetated areas ----\nsr16_wild_veg_large_dist &lt;- terra::distance(sr16_wild_veg_large)\nset.values(sr16_wild_veg_large_dist)\nterra::writeRaster(sr16_wild_veg_large_dist, \n                   \"data/processed_data/sr16_wild_veg_large_dist.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Percentage-vegetation ----\nsr16_wv_perc &lt;- get_perc_veg_buffer(\n  .veg = sr16_wild_veg,\n  .radio_buffer = radio_buffer)\nterra::writeRaster(sr16_wv_perc, \n                   \"data/processed_data/sr16_wv_perc.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n\n\n\nShow the code\n# Plot original data ----\ncategorical_levels &lt;- function(.x){\n  r &lt;- .x\n  levels(r) &lt;- data.frame(id = 1:3, type =  c(\"spruce\", \"pine\", \"deciduous\"))\n  return(r)\n}\n\nsr16_vrt &lt;- terra::vrt(sr16r_path) \nlevels(sr16_vrt) &lt;- data.frame(id = 1:3, type =  c(\"spruce\", \"pine\", \"deciduous\"))\nno_v_p &lt;- project(no_v, \"EPSG:25833\")\nplot(no_v_p, col = \"lightgrey\", axes = FALSE, legend = FALSE)\nplot(sr16_vrt, col = c(\"lightgreen\", \"darkgreen\", \"yellow\"), axes = FALSE, add = T)\n\n\n\n\n\n\n\n\nFigure 3.7: Wildland vegetation in Norway by type of vegetation (Source SR16)\n\n\n\n\n\n\n\n3.2.4.3.2 Swedish National Land Cover Database (NMD)\nWe download the NMD Base map from the Swedish Environmental Protection Agency (Nationella marktäckedata 2018; basskikt). It classified Sweden in 6 main levels, which later are subdivided in level 2 and level 3 (Figure 3.8):\n\nNMD categories (table Bilaga 1: Nomenklatur)\n\n\n\n\n\n\n\nLevel 1\nLevel 2\nLevel 3\n\n\n\n\n\nSkog\n\n1.1 Skog utanför våtmark\n1.1.1 Tallskog utanför våtmark\n1.1.2 Granskog utanför våtmark\n1.1.3 Barrblandskog utanför våtmark\n1.1.4 Lövblandad barrskog utanför våtmark\n1.1.5 Triviallövskog utanför våtmark\n1.1.6 Ädellövskog utanför våtmark\n1.1.7 Triviallövskog med ädellövinslag utanför våtmark\n1.1.8 Temporärt ej skog utanför våtmark\n\n\n\n1.2 Skog på våtmark\n1.2.1 Tallskog på våtmark\n1.2.2 Granskog på våtmark\n1.2.3 Barrblandskog på våtmark\n1.2.4 Lövblandad barrskog på våtmark\n1.2.5 Triviallövskog på våtmark\n1.2.6 Ädellövskog på våtmark\n1.2.7 Triviallövskog med ädellövinslag på våtmark\n1.2.8 Temporärt ej skog på våtmark\n\n\n\nVåtmark\n\n\n\n\n\n\nÅkermark\n\n\n\n\n\n\nÖvrig öppen mark\n\n4.1 Övrig öppen mark utan vegetation\n\n\n\n\n4.2 Övrig öppen mark med vegetation\n\n\n\n\nExploaterad mark\n\n5.1 Exploaterad mark, byggnad\n\n\n\n\n5.2 Exploaterad mark, ej byggnad eller väg/järnväg\n\n\n\n\n5.3 Exploaterad mark, väg/järnväg\n\n\n\n\nVatten\n\n6.1 Sjö och vattendrag\n\n\n\n\n6.2 Hav\n\n\n\n\n\n\nShow the code\nnmd_path &lt;- \"data/big_data/NMD2018/nmd2018bas_ogeneraliserad_v1_1.tif\" \nnmd_r &lt;- rast(nmd_path) \n\n# Vegetation code\nlevles_lst &lt;- levels(nmd_r)\nlevles_lst[[1]]$Klass &lt;- iconv(levles_lst[[1]]$Klass, \"latin1\")\nlevels(nmd_r) &lt;- levles_lst\n\nnmd_veg_list &lt;- levles_lst[[1]] |&gt;\n  as_tibble() |&gt; \n  mutate(Klass = ifelse(Klass == \"\", NA, Klass)) |&gt; \n  drop_na()\n\nplot(nmd_r) \n\n\n\n\n\n\n\n\nFigure 3.8: Vegetation map of Sweden (National Land Cover Database 2018)\n\n\n\n\n\nThen, we classified as non-burnable the following categories:\n\n\nShow the code\nnmd_no_fuel_list &lt;- nmd_veg_list |&gt; \n  filter(value %in% c(3, 41, 42, 51, 52, 53, 61, 62, 131, 169, 170, 179, 181, 189, 190))\n\nnmd_no_fuel_list |&gt; \n  gt()\n\n\n\n\nTable 3.1: Non-burnable vegetation (categories)\n\n\n\n\n\n\n\n\n\nvalue\nKlass\n\n\n\n\n3\nÅkermark\n\n\n41\nÖvrig öppen mark utan vegetation\n\n\n42\nÖvrig öppen mark med vegetation\n\n\n51\nExploaterad mark, byggnad\n\n\n52\nExploaterad mark, ej byggnad eller väg/järnväg\n\n\n53\nExploaterad mark, väg/järnväg\n\n\n61\nSjö och vattendrag\n\n\n62\nHav\n\n\n131\nÅkermark\n\n\n169\nÖvrig öppen mark utan vegetation\n\n\n170\nÖvrig öppen mark med vegetation\n\n\n179\nExploaterad mark, byggnad\n\n\n181\nExploaterad mark, väg/järnväg\n\n\n189\nSjö och vattendrag\n\n\n190\nHav\n\n\n\n\n\n\n\n\n\n\nThe original resolution of the map is 10 meters. We aggregated it (by a factor of 10) and transformed the coordinate system from SWEREF99 TM (EPSG:3006) to ETRS89-extended / LAEA Europe (EPSG:3035).\n\n\nShow the code\n# Reduce resolution \nnmd_r_a &lt;- aggregate(nmd_r, fact = 10, fun = \"modal\") |&gt; \n  project(\"EPSG:3035\", method = \"near\")\n\n# Remove no fuel vegetations \nnmd_wild_veg &lt;- nmd_r_a |&gt; \n  mutate(Klass = ifelse(Klass %in% nmd_no_fuel_list$Klass, NA, Klass))\n\n# Wild vegetation; YES = 1, NO = 0\nnmd_wild_veg[nmd_wild_veg == 1] &lt;- NA  # Outside Sweden \nnmd_wild_veg[nmd_wild_veg  &gt; 1] &lt;- 1\n\n# Export as .tif\nnames(nmd_wild_veg) &lt;- \"wild_veg\"\ncoltab(nmd_wild_veg) &lt;- NULL\nset.values(nmd_wild_veg)\nterra::writeRaster(nmd_wild_veg,\n                   \"data/processed_data/nmd_wild_veg.tif\", \n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Large forest areas (&gt; 5km2)\nnmd_wild_veg_large &lt;- stars::read_stars(\"data/processed_data/nmd_wild_veg.tif\") |&gt; \n  get_large_polygons() \nset.values(nmd_wild_veg_large)\nterra::writeRaster(nmd_wild_veg_large, \n                   \"data/processed_data/nmd_wild_veg_large.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Distances to large vegetated areas ----\nnmd_wild_veg_large_dist &lt;- terra::distance(nmd_wild_veg_large)\nset.values(nmd_wild_veg_large_dist)\nterra::writeRaster(nmd_wild_veg_large_dist, \n                   \"data/processed_data/nmd_wild_veg_large_dist.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Percentage-vegetation ----\nnmd_wv_perc &lt;- get_perc_veg_buffer(\n  .veg = nmd_wild_veg,\n  .radio_buffer = radio_buffer)\nset.values(nmd_wv_perc)\nterra::writeRaster(nmd_wv_perc, \n                   \"data/processed_data/nmd_wv_perc.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n\nFinally, we combined both maps in one (Figure 3.9)\n\n\nShow the code\n# Read SR16 data\nsr16_wild_veg &lt;- terra::rast(\"data/processed_data/sr16_wild_veg.tif\")\ndist_path &lt;- \"data/processed_data/sr16_wild_veg_large_dist.tif\"\nsr16_wild_veg_large_dist_2400 &lt;- terra::rast(dist_path) |&gt; \n  get_dist_max(2400)\n\n# Read NRM data\nnmd_wild_veg &lt;- terra::rast(\"data/processed_data/nmd_wild_veg.tif\")\ndist_path &lt;- \"data/processed_data/nmd_wild_veg_large_dist.tif\"\nnmd_wild_veg_large_dist_2400 &lt;- terra::rast(dist_path) |&gt; \n  get_dist_max(2400)\n\n# Plot\npar(mfrow = c(1,2), adj = 0)\n\n# Wildland vegetation (Yes = 1, No = NA)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(sr16_wild_veg, col = \"#009E73\", axes = F, legend = F, add = T)\nplot(nmd_wild_veg, col = \"#009E73\", axes = F, legend = F, add = T)\ntitle(\"A)\", adj = 0)\n# Within a distance of 2.4 km (Yes = 1, No = 0)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(sr16_wild_veg_large_dist_2400, \n     col = c(NA, \"#0072B2\"),\n     axes = F, \n     legend = F,\n     add = T)\nplot(nmd_wild_veg_large_dist_2400, \n     col = c(NA, \"#0072B2\"), \n     axes = F, \n     legend = F, \n     add = T)\ntitle(\"B)\", adj = 0)\n\n\n\n\n\n\n\n\nFigure 3.9: a) Wildland vegetation in the region, and b) grid cells within a distance to large vegetation areas (&gt;5km2) of 2.4 km (Source SR16 and NMD)\n\n\n\n\n\n\n\n\n3.2.4.4 FirEUrisk_Europe_fuel_map\nOriginal data from (Aragoneses, Garcia, and Chuvieco 2022) and we considered all fuels. The resolution of the original map is 1km , so we have re-sampled it to a grid cell of 250x250 metres (same than region_r) based in the type that is most presented in the area; i.e., mode.\n\n\nShow the code\n# Codes\nfirEUrisk_fuel_type &lt;- tribble(~code, ~description,\n                                1111,\"Open broadleaf evergreen forest\",\n                                  23, \"High shrubland\",\n                                1112, \"Closed broadleaf evergreen forest\",\n                                  31, \"Low grassland\",\n                                1121, \"Open broadleaf deciduous forest\",\n                                  32, \"Medium grassland\",\n                                1122, \"Closed broadleaf deciduous forest\",\n                                  33, \"High grassland\",\n                                1211, \"Open needleleaf evergreen forest\",\n                                  41, \"Herbaceous cropland\",\n                                1212, \"Closed needleleaf evergreen forest\",\n                                  42, \"Woody cropland\",\n                                1221, \"Open needleleaf deciduous forest\",\n                                  51, \"Wet and peat/semi-peat land – tree\",\n                                1222, \"Closed needleleaf deciduous forest\", \n                                  52, \"Wet and peat/semi-peat land – shrubland\",\n                                1301, \"Open mixed forest\",\n                                  53, \"Wet and peat/semi-peat land – grassland\",\n                                1302, \"Closed mixed forest\",\n                                  61, \"Urban continuous fabric\",\n                                  21, \"Low shrubland\",\n                                  62, \"Urban discontinuous fabric\",\n                                  22, \"Medium shrubland\",\n                                   7, \"Nonfuel\")\n\nfirEUrisk_no_fuel_type &lt;- tribble(~code, ~description,\n                                     41, \"Herbaceous cropland\",\n                                     42, \"Woody cropland\",\n                                     51, \"Wet and peat/semi-peat land – tree\",\n                                     52, \"Wet and peat/semi-peat land – shrubland\",\n                                     53, \"Wet and peat/semi-peat land – grassland\",\n                                     61, \"Urban continuous fabric\",\n                                     62, \"Urban discontinuous fabric\",\n                                      7, \"Nonfuel\")\n\n# Forest layer norway\nfirEUrisk_fuel_path &lt;- \"data/big_data/firEUrisk/FirEUrisk_Europe_fuel_map.tif\"\nfirEUrisk_fuel &lt;- rast(firEUrisk_fuel_path) |&gt; \n  crop(region_v) |&gt; \n  mask(region_v)\n\n# Resample to grid cells of 250m x 250m (same than region_r)\nfirEUrisk_fuel_250m &lt;- resample(firEUrisk_fuel, region_r, method = \"mode\") |&gt; \n # Remove no fuel vegetations \n  mutate(FirEUrisk_Europe_fuel_map = ifelse(FirEUrisk_Europe_fuel_map %in% firEUrisk_no_fuel_type$code,\n                    NA,\n                    FirEUrisk_Europe_fuel_map))\n\n# Wildland vegetation\nfirEUrisk_wild_veg &lt;- firEUrisk_fuel_250m \nfirEUrisk_wild_veg[firEUrisk_wild_veg &gt;= 1] &lt;- 1\nnames(firEUrisk_wild_veg) &lt;- \"wild_veg\"\nterra::writeRaster(firEUrisk_wild_veg, \n                   \"data/processed_data/firEUrisk_wild_veg.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Large forest areas (&gt; 5km2)\nfirEUrisk_wild_veg_large &lt;- stars::read_stars(\"data/processed_data/firEUrisk_wild_veg.tif\") |&gt; \n  get_large_polygons() \nterra::writeRaster(firEUrisk_wild_veg_large, \n                   \"data/processed_data/firEUrisk_wild_veg_large.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Distances to large vegetated areas ----\nset.values(firEUrisk_wild_veg_large)\nfirEUrisk_wild_veg_large_dist &lt;- terra::distance(firEUrisk_wild_veg_large)\nterra::writeRaster(firEUrisk_wild_veg_large_dist, \n                   \"data/processed_data/firEUrisk_wild_veg_large_dist.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n\n# Percentage-vegetation ----\nfirEUrisk_wv_perc &lt;- get_perc_veg_buffer(\n  .veg = firEUrisk_wild_veg,\n  .radio_buffer = radio_buffer)\nterra::writeRaster(firEUrisk_wv_perc, \n                   \"data/processed_data/firEUrisk_wv_perc.tif\",\n                   filetype = \"GTiff\", \n                   overwrite = TRUE)\n# Plot ----\nlevels(firEUrisk_fuel_250m) &lt;- data.frame(id = firEUrisk_fuel_type$code,\n                                          type =  firEUrisk_fuel_type$description)\n\nplot(region_r, col = \"lightgrey\", axes = FALSE, legend = FALSE)\nplot(firEUrisk_fuel_250m, axes = FALSE, add = T)\n\n\n\n\n\n\n\n\nFigure 3.10: Wildland vegetation in Norway by type of vegetation (Source EFFIS Fuel Map)\n\n\n\n\n\n\n\nShow the code\n# Read Effis data\nfirEUrisk_wild_veg &lt;- terra::rast(\"data/processed_data/firEUrisk_wild_veg.tif\")\ndist_path &lt;- \"data/processed_data/firEUrisk_wild_veg_large_dist.tif\"\nfirEUrisk_wild_veg_large_dist_2400 &lt;- terra::rast(dist_path) |&gt; \n  get_dist_max(2400)\n\n# Plot\npar(mfrow = c(1,2), adj = 0)\n\n# Wildand vegetation (Yes = 1, No = NA)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(firEUrisk_wild_veg, col = \"#009E73\", axes = F, legend = F, add = T)\ntitle(\"A)\", adj = 0)\n# Within a distance of 2.4 km (Yes = 1, No = 0)\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(firEUrisk_wild_veg_large_dist_2400, col = c(NA, \"#0072B2\"), axes = F, legend = F, add = T)\ntitle(\"B)\", adj = 0)\n\n\n\n\n\n\n\n\nFigure 3.11: a) Wildland vegetation in Norway, and b) grid cells within a distance to large vegetation areas (&gt;5km2) of 2.4 km (Source EFFIS Fuel Map)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R scripts</span>"
    ]
  },
  {
    "objectID": "article_codes.html#wui-classification",
    "href": "article_codes.html#wui-classification",
    "title": "3  R scripts",
    "section": "3.3 WUI classification",
    "text": "3.3 WUI classification\nWe have used the definition described by (Stewart et al. 2007; Bar-Massada 2021; Bar-Massada et al. 2013), which is shown in Figure 3.12:\n\n\nShow the code\nknitr::include_graphics(\"figures/wui_map_approach_bar_massada_2021.png\")\n\n\n\n\n\n\n\n\nFigure 3.12: Zonal-based WUI mapping approach\n\n\n\n\n\nWe carried out a point-based approach with grid cells of 250 m x 250 m, and a buffer radio of 500 m. Our workflow was therefore:\n\n\n\n\n\nflowchart TD\n    A[\"Grid 250m x 250m\"] --&gt; B{\"Building density &gt; 6.17 #/km2\"}\n    B -- Yes --&gt; C{\"Vegetation &gt; 50%\"}\n    B -- No --&gt; D[\"No WUI\"]\n    C -- Yes --&gt; E[\"Intermix\"]\n    C -- No --&gt; F{\"Within 2.4 km of large \n    forest (&gt;5 km)\"}\n    F -- Yes --&gt; G[\"Interface\"]\n    F -- No --&gt; H[\"No WUI\"]\n    style D fill:lightgrey\n    style E fill:#003366,color:#FFFFFF\n    style G fill:#FF6633\n    style H fill:lightgrey\n\n\n\n\n\n\n\nTherefore, we did the following steps:\n\nCreate a raster with the potential WUI cells (wui_potential)\n\n\nBuilding density (in the buffer area) ≤ 6.16 #/km^2 –&gt; NA\nBuilding density (in the buffer area) &gt; 6.16 #/km^2 –&gt; 1\n\n\nCreate a raster with the grids where the percentage of fuel vegetation in the buffer area is higher than 50% (wv_perc)\n\n\nPercentage &lt; 50% –&gt; 0\nPercentage ≥ 50% –&gt; 1\n\n\nCreate a raster indicating if the grid cell is within 2.4 km of a large (&gt;5 km2) fuel vegetation area (wild_veg_large_dist_*)\n\n\nYes: 1\nNo: 0\n\n\nSum both rasters (wv_perc + wui_potential), and generate a new raster (wui) with three options :\n\n\nwui = NA –&gt; No WUI\nwui = 2 –&gt; WUI intermix\nwui = 1 –&gt; Potential interface (it is reassigned to 0 in the raster)\n\n\nSum this raster (wui) and wild_veg_large_dist_, we get therefore that:\n\n\nwui = NA –&gt; No WUI\nwui = 0 –&gt; No WUI\nwui = 1 –&gt; Interface\nwui = 2 –&gt; Intermix\nwui = 3 –&gt; Intermix\n\n\n\nShow the code\n# Minimum number of buildings (N) in the buffer area ----\n# WUI if building density (d) &gt; 6.17 [#/km^2]\n# N = d [#/km^2] * A [km^2]\n# A = pi * radio^2\nd_min &lt;- 6.17\nN_min &lt;- round(d_min * area_buffer, 3)\n\nwui_potential &lt;- build_focal\nwui_potential[wui_potential &lt;= N_min] &lt;- NA\nwui_potential[wui_potential &gt;  N_min] &lt;- 1\n\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(wui_potential, axes = F, legend = F, add = T)\n\n\n\n\n\n\n\n\nFigure 3.13: Potential WUI grids based on building density\n\n\n\n\n\n\n\nShow the code\neffis_wv_perc     &lt;- terra::rast(\"data/processed_data/effis_wv_perc.tif\")\ncorine_wv_perc    &lt;- terra::rast(\"data/processed_data/corine_wv_perc.tif\")\nsr16_wv_perc      &lt;- terra::rast(\"data/processed_data/sr16_wv_perc.tif\")\nnmd_wv_perc       &lt;- terra::rast(\"data/processed_data/nmd_wv_perc.tif\")\nfirEUrisk_wv_perc &lt;- terra::rast(\"data/processed_data/firEUrisk_wv_perc.tif\")\n\n\n\n\nShow the code\n# EFFIS\neffis_wui &lt;- get_wui_raster(.veg_perc = effis_wv_perc,\n                            .veg_dist = effis_wild_veg_large_dist_2400)\n\n# CORINE\ncorine_wui &lt;- get_wui_raster(.veg_perc = corine_wv_perc,\n                             .veg_dist = corine_wild_veg_large_dist_2400)\n\n# National maps\nsr16_wui &lt;- get_wui_raster(.veg_perc = sr16_wv_perc,\n                           .veg_dist = sr16_wild_veg_large_dist_2400,\n                           .region = no_v)\n\nnrm_wui &lt;- get_wui_raster(.veg_perc = nmd_wv_perc,\n                          .veg_dist = nmd_wild_veg_large_dist_2400,\n                          .region = se_v)\n\nnational_wui &lt;- mosaic(sr16_wui, nrm_wui, fun = \"max\") |&gt; \n  add_colours_wui()\n\n# firEUrisk\nfirEUrisk_wui &lt;- get_wui_raster(.veg_perc = firEUrisk_wv_perc,\n                                .veg_dist = firEUrisk_wild_veg_large_dist_2400)\n\n# Put all rasters in one \nwui_r &lt;- c(effis_wui, corine_wui, national_wui, firEUrisk_wui)\nnames(wui_r) &lt;- c(\"effis\", \"corine\", \"national\", \"firEUrisk\")\n\nterra::saveRDS(wui_r, \"data/processed_data/wui_r.rds\")\n\n\nMap of WUI areas (Figure 3.14; Table 3.2).\n\n\nShow the code\nwui_r &lt;- terra::readRDS(\"data/processed_data/wui_r.rds\")\n\n\n\nShow the code\nf_plot &lt;- function(.x){ plot(.x, \n                             axes = F, \n                             mar = c(0, 0, 0, 0),\n                             legend = \"topleft\")  }\n\nf_plot(wui_r$effis)\nf_plot(wui_r$corine)\nf_plot(wui_r$firEUrisk)\nf_plot(wui_r$national)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) EFFIS\n\n\n\n\n\n\n\n\n\n\n\n(b) CORINE\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) FirEUrisk\n\n\n\n\n\n\n\n\n\n\n\n(d) National databases\n\n\n\n\n\n\n\nFigure 3.14: WUI maps of Norway based on different fuel/vegetation maps (resolution of 250 x 250 m)\n\n\n\nPercentages at national scale from the different vegetation/fuel types (based on the number of grids cells of 250x 250 [m] for each WUI type):\n\nShow the code\n# summary table \ntbl_summary_vegetation &lt;- function(.x){\n  \n  .x |&gt; \n    as_tibble() |&gt; \n    drop_na() |&gt; \n    pivot_longer(everything(), \n                 names_to = \"name\",\n                 values_to = \"value\") |&gt; \n    group_by(name, value) |&gt; \n    summarise(count = n()) |&gt; \n    ungroup() |&gt; \n    group_by(name) |&gt; \n    mutate(total = sum(count),\n           pct = 100*count/total) |&gt; \n    pivot_wider(names_from = \"value\", \n                values_from = c(\"count\", \"pct\")) |&gt; \n    mutate(pct_wui = pct_Interface + pct_Intermix) |&gt; \n    select(starts_with(\"pct\")) |&gt; \n    relocate(pct_wui, .after = pct_No_wui) |&gt; \n    gt(row_group_as_column = TRUE) |&gt; \n    fmt_number(decimals = 1) |&gt; \n    cols_label(\n      name = \"\",\n      pct_No_wui = md(\"**No WUI**\"),\n      pct_Interface = md(\"**Interface**\"),\n      pct_Intermix = md(\"**Intermix**\"),\n      pct_wui = md(\"**Total**\")\n    )  |&gt; \n    tab_spanner(\n      label = md(\"**WUI**\"),\n      columns = c(pct_Interface, pct_Intermix, pct_wui)\n    ) |&gt; \n    tab_options(\n      table.font.size = 9,\n      row_group.padding = px(1),\n      row_group.font.weight = \"bold\",\n      data_row.padding = px(1)\n    )\n  \n}\n\n\n# Summary WUI by country \nwui_r_no &lt;- mask(wui_r, no_v)\nwui_r_se &lt;- mask(wui_r, se_v)\n\n# Tables\ntbl_summary_vegetation(wui_r_no) \ntbl_summary_vegetation(wui_r_se) \n\n\n\n\nTable 3.2: Percentages of WUI by vegetation and country\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\ncorine\n83.1\n6.6\n10.3\n16.9\n\n\neffis\n82.5\n5.9\n11.6\n17.5\n\n\nfirEUrisk\n86.5\n3.8\n9.7\n13.5\n\n\nnational\n88.7\n7.5\n3.8\n11.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\ncorine\n91.2\n4.1\n4.7\n8.8\n\n\neffis\n91.1\n3.7\n5.2\n8.9\n\n\nfirEUrisk\n92.7\n2.2\n5.1\n7.3\n\n\nnational\n90.6\n4.5\n4.9\n9.4\n\n\n\n\n\n\n\n\n\n\n\n\n\nValuer by counties: Table 3.3):\n\nShow the code\n# Function for printing the table\ntbl_summary_county &lt;- function(.x) {\n  .x |&gt; \n    select(NUTS_NAME, name, starts_with(\"pct\")) |&gt; \n    gt(rowname_col = \"name\",\n       groupname_col = \"NUTS_NAME\",\n       row_group_as_column = FALSE) |&gt; \n    fmt_number(decimals = 1) |&gt; \n    cols_label(\n      name = \"\",\n      pct_No_wui = md(\"**No WUI**\"),\n      pct_Interface = md(\"**Interface**\"),\n      pct_Intermix = md(\"**Intermix**\"),\n      pct_wui = md(\"**Total**\")\n    )  |&gt; \n    tab_spanner(\n      label = md(\"**WUI**\"),\n      columns = c(pct_Interface, pct_Intermix, pct_wui)\n    ) |&gt; \n    tab_options(\n      table.font.size = 9,\n      row_group.background.color = \"lightgrey\",\n      row_group.padding = px(1),\n      row_group.font.weight = \"bold\",\n      data_row.padding = px(1)\n    ) \n}\n\n\n# Summary by county\ntbl_wui_county &lt;- terra::extract(wui_r, counties) |&gt;  \n  pivot_longer(cols = -ID, \n               names_to = \"name\",\n               values_to = \"value\") |&gt; \n  group_by(ID, name, value) |&gt; \n  summarise(count = n()) |&gt; \n  ungroup() |&gt; \n  group_by(ID, name) |&gt; \n  mutate(total = sum(count), \n         pct = 100*count/total) |&gt; \n  ungroup() |&gt; \n  pivot_wider(names_from = \"value\",\n              values_from = c(\"count\", \"pct\")) |&gt; \n  mutate(pct_wui = pct_Interface + pct_Intermix) \n  \n# Add values to sf counties\ncounties_wui &lt;- counties |&gt; \n  st_as_sf()  %&gt;% \n  mutate(ID := seq_len(nrow(.)))  |&gt; \n  left_join(tbl_wui_county, by = \"ID\") |&gt; \n  st_drop_geometry() |&gt; \n  as_tibble() \n\n# Table by country & county \nfilter(counties_wui, CNTR_CODE == \"NO\") |&gt; \n  tbl_summary_county()\nfilter(counties_wui, CNTR_CODE == \"SE\") |&gt; \n  tbl_summary_county()\n\n\n\n\nTable 3.3: Percentages of WUI by county\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nViken\n\n\ncorine\n64.1\n13.8\n22.2\n35.9\n\n\neffis\n64.5\n12.4\n23.1\n35.5\n\n\nfirEUrisk\n69.3\n7.8\n22.9\n30.7\n\n\nnational\n69.5\n20.1\n10.4\n30.5\n\n\nRogaland\n\n\ncorine\n81.4\n9.4\n9.2\n18.6\n\n\neffis\n78.3\n9.8\n11.9\n21.7\n\n\nfirEUrisk\n87.0\n5.4\n7.6\n13.0\n\n\nnational\n91.5\n6.0\n2.5\n8.5\n\n\nVestland\n\n\ncorine\n84.1\n6.1\n9.8\n15.9\n\n\neffis\n82.7\n5.8\n11.5\n17.3\n\n\nfirEUrisk\n88.3\n3.9\n7.9\n11.7\n\n\nnational\n93.2\n4.4\n2.4\n6.8\n\n\nTrøndelag\n\n\ncorine\n83.7\n8.1\n8.1\n16.3\n\n\neffis\n82.6\n6.4\n11.0\n17.4\n\n\nfirEUrisk\n87.1\n4.6\n8.3\n12.9\n\n\nnational\n90.9\n6.9\n2.2\n9.1\n\n\nTroms og Finnmark\n\n\ncorine\n94.5\n2.0\n3.5\n5.5\n\n\neffis\n94.3\n1.9\n3.8\n5.7\n\n\nfirEUrisk\n95.8\n1.4\n2.8\n4.2\n\n\nnational\n97.1\n2.1\n0.8\n2.9\n\n\nInnlandet\n\n\ncorine\n78.3\n7.1\n14.6\n21.7\n\n\neffis\n78.3\n5.2\n16.5\n21.7\n\n\nfirEUrisk\n80.5\n4.1\n15.4\n19.5\n\n\nnational\n82.3\n11.4\n6.4\n17.7\n\n\nOslo\n\n\ncorine\n65.7\n12.8\n21.5\n34.3\n\n\neffis\n66.7\n11.6\n21.7\n33.3\n\n\nfirEUrisk\n70.7\n7.5\n21.8\n29.3\n\n\nnational\n64.1\n24.3\n11.6\n35.9\n\n\nVestfold og Telemark\n\n\ncorine\n75.0\n7.3\n17.7\n25.0\n\n\neffis\n75.2\n6.6\n18.2\n24.8\n\n\nfirEUrisk\n78.4\n4.3\n17.2\n21.6\n\n\nnational\n79.5\n12.1\n8.4\n20.5\n\n\nAgder\n\n\ncorine\n76.2\n4.5\n19.3\n23.8\n\n\neffis\n76.3\n4.0\n19.7\n23.7\n\n\nfirEUrisk\n79.0\n2.8\n18.2\n21.0\n\n\nnational\n82.9\n10.0\n7.0\n17.1\n\n\nMøre og Romsdal\n\n\ncorine\n79.6\n8.4\n11.9\n20.4\n\n\neffis\n78.2\n8.3\n13.5\n21.8\n\n\nfirEUrisk\n85.2\n5.7\n9.1\n14.8\n\n\nnational\n85.2\n10.1\n4.7\n14.8\n\n\nNordland\n\n\ncorine\n88.9\n4.5\n6.6\n11.1\n\n\neffis\n88.2\n4.2\n7.7\n11.8\n\n\nfirEUrisk\n92.4\n2.5\n5.1\n7.6\n\n\nnational\n94.9\n3.5\n1.6\n5.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nKalmar län\n\n\ncorine\n88.4\n4.2\n7.3\n11.6\n\n\neffis\n86.8\n4.7\n8.5\n13.2\n\n\nfirEUrisk\n89.4\n2.4\n8.2\n10.6\n\n\nnational\n87.6\n4.7\n7.7\n12.4\n\n\nBlekinge län\n\n\ncorine\n86.7\n5.4\n7.8\n13.3\n\n\neffis\n86.5\n5.2\n8.2\n13.5\n\n\nfirEUrisk\n90.0\n2.7\n7.3\n10.0\n\n\nnational\n86.3\n6.3\n7.4\n13.7\n\n\nGävleborgs län\n\n\ncorine\n90.8\n3.6\n5.6\n9.2\n\n\neffis\n90.9\n3.2\n5.9\n9.1\n\n\nfirEUrisk\n92.0\n2.3\n5.7\n8.0\n\n\nnational\n90.4\n3.8\n5.8\n9.6\n\n\nVästerbottens län\n\n\ncorine\n96.7\n1.2\n2.1\n3.3\n\n\neffis\n96.7\n1.0\n2.3\n3.3\n\n\nfirEUrisk\n96.9\n0.7\n2.3\n3.1\n\n\nnational\n96.6\n1.2\n2.2\n3.4\n\n\nNorrbottens län\n\n\ncorine\n98.3\n0.7\n1.0\n1.7\n\n\neffis\n98.3\n0.6\n1.2\n1.7\n\n\nfirEUrisk\n98.5\n0.4\n1.1\n1.5\n\n\nnational\n98.2\n0.7\n1.0\n1.8\n\n\nSödermanlands län\n\n\ncorine\n75.8\n13.5\n10.7\n24.2\n\n\neffis\n75.8\n12.6\n11.7\n24.2\n\n\nfirEUrisk\n80.2\n7.0\n12.8\n19.8\n\n\nnational\n74.0\n14.9\n11.1\n26.0\n\n\nVärmlands län\n\n\ncorine\n86.1\n5.9\n8.0\n13.9\n\n\neffis\n86.1\n5.4\n8.5\n13.9\n\n\nfirEUrisk\n87.4\n3.6\n9.0\n12.6\n\n\nnational\n85.6\n5.8\n8.5\n14.4\n\n\nUppsala län\n\n\ncorine\n77.4\n11.6\n11.0\n22.6\n\n\neffis\n77.2\n10.9\n11.8\n22.8\n\n\nfirEUrisk\n82.1\n6.6\n11.3\n17.9\n\n\nnational\n75.3\n12.6\n12.1\n24.7\n\n\nKronobergs län\n\n\ncorine\n88.1\n3.7\n8.2\n11.9\n\n\neffis\n88.2\n3.1\n8.7\n11.8\n\n\nfirEUrisk\n88.9\n2.1\n8.9\n11.1\n\n\nnational\n87.9\n3.9\n8.3\n12.1\n\n\nSkåne län\n\n\ncorine\n86.9\n7.2\n5.9\n13.1\n\n\neffis\n84.2\n8.1\n7.7\n15.8\n\n\nfirEUrisk\n90.6\n3.4\n6.0\n9.4\n\n\nnational\n84.1\n9.8\n6.1\n15.9\n\n\nStockholms län\n\n\ncorine\n53.4\n23.8\n22.8\n46.6\n\n\neffis\n53.3\n21.7\n25.1\n46.7\n\n\nfirEUrisk\n63.7\n12.2\n24.1\n36.3\n\n\nnational\n48.5\n25.8\n25.7\n51.5\n\n\nVästmanlands län\n\n\ncorine\n87.1\n8.1\n4.8\n12.9\n\n\neffis\n87.1\n7.6\n5.3\n12.9\n\n\nfirEUrisk\n90.4\n4.5\n5.1\n9.6\n\n\nnational\n85.5\n9.3\n5.2\n14.5\n\n\nHallands län\n\n\ncorine\n90.6\n4.9\n4.5\n9.4\n\n\neffis\n90.3\n4.8\n5.0\n9.7\n\n\nfirEUrisk\n92.8\n2.3\n4.9\n7.2\n\n\nnational\n89.2\n6.4\n4.5\n10.8\n\n\nVästra Götalands län\n\n\ncorine\n74.3\n12.8\n12.9\n25.7\n\n\neffis\n74.2\n11.8\n13.9\n25.8\n\n\nfirEUrisk\n80.1\n6.7\n13.3\n19.9\n\n\nnational\n72.9\n14.8\n12.3\n27.1\n\n\nJämtlands län\n\n\ncorine\n97.7\n0.9\n1.4\n2.3\n\n\neffis\n97.7\n0.8\n1.6\n2.3\n\n\nfirEUrisk\n97.9\n0.6\n1.6\n2.1\n\n\nnational\n97.6\n1.0\n1.4\n2.4\n\n\nÖstergötlands län\n\n\ncorine\n87.5\n6.3\n6.2\n12.5\n\n\neffis\n87.1\n6.1\n6.8\n12.9\n\n\nfirEUrisk\n89.8\n3.2\n7.0\n10.2\n\n\nnational\n85.8\n7.6\n6.6\n14.2\n\n\nVästernorrlands län\n\n\ncorine\n91.0\n3.2\n5.8\n9.0\n\n\neffis\n91.1\n2.9\n6.0\n8.9\n\n\nfirEUrisk\n92.1\n2.1\n5.7\n7.9\n\n\nnational\n90.8\n3.1\n6.1\n9.2\n\n\nDalarnas län\n\n\ncorine\n92.8\n3.1\n4.1\n7.2\n\n\neffis\n92.9\n2.8\n4.3\n7.1\n\n\nfirEUrisk\n93.9\n1.7\n4.4\n6.1\n\n\nnational\n92.4\n3.1\n4.4\n7.6\n\n\nJönköpings län\n\n\ncorine\n89.3\n4.5\n6.2\n10.7\n\n\neffis\n89.5\n3.8\n6.8\n10.5\n\n\nfirEUrisk\n90.2\n2.4\n7.3\n9.8\n\n\nnational\n88.9\n4.9\n6.3\n11.1\n\n\nÖrebro län\n\n\ncorine\n81.7\n7.7\n10.6\n18.3\n\n\neffis\n81.7\n7.2\n11.1\n18.3\n\n\nfirEUrisk\n85.4\n3.9\n10.7\n14.6\n\n\nnational\n80.0\n9.1\n10.9\n20.0\n\n\nGotlands län\n\n\ncorine\n82.1\n10.9\n7.1\n17.9\n\n\neffis\n80.8\n9.3\n9.9\n19.2\n\n\nfirEUrisk\n85.2\n5.9\n8.9\n14.8\n\n\nnational\n81.3\n12.1\n6.6\n18.7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Add county ID\ncounties_cent_ID &lt;- counties |&gt;\n  st_centroid() %&gt;%\n  mutate(x = st_coordinates(.)[,1],\n         y = st_coordinates(.)[,2]) |&gt; \n  arrange(desc(y), x) |&gt; \n  mutate(ID = seq_along(counties$NUTS_NAME)) \n\ncounties_ID &lt;- counties |&gt; \n  as_tibble() |&gt; \n  left_join(counties_cent_ID, \"NUTS_NAME\") |&gt; \n  st_sf()\n\n# geofacet\n\nmygrid &lt;- data.frame(\n  code = c(\"1 Troms og F.\", \n           \"2 Norrbotten\", \n           \"3 Nordland\", \n           \"4 Västerbotten\", \n           \"5 Trøndelag\", \n           \"7 Västernorrland\", \n           \"6 Jämtland\", \n           \"8 Møre og R.\", \n           \"10 Innlandet\", \n           \"11 Dalarna\", \n           \"9 Gävleborg\", \n           \"12 Vestland\",\n           \"15 Oslo\",\n           \"14 Viken\",\n           \"13 Uppsala\",\n           \"16 Västmanland\",\n           \"20 Örebro\", \n           \"17 Värmland\",\n           \"22 Rogaland\", \n           \"19 Vestfold og T.\",\n           \"18 Stockholm\", \n           \"21 Södermanland\",\n           \"24 Östergötland\",\n           \"25 Västra Götaland\",\n           \"23 Agder\", \n           \"29 Halland\", \n           \"27 Jönköping\", \n           \"28 Kalmar\", \n           \"26 Gotland\", \n           \"30 Kronoberg\", \n           \"31 Blekinge\",\n           \"32 Skåne\"),\n  row = c(2, 2, 3, 3, 4, 4, 4, 5, 5, 5,\n          5, 6, 6, 6, 6, 6, 6, 6, 7, 7, \n          7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10),\n  col = c(6, 7, 6, 7, 5, 7, 6, 4, 5, 6,\n          7, 3, 5, 4, 9, 8, 7, 6, 3, 4, \n          9, 8, 7, 6, 4, 6, 7, 8, 9, 6, 7, 6),\n  name = c(\"Troms og Finnmark\",\n           \"Norrbotten\", \n           \"Nordland\",\n           \"Västerbotten\", \n           \"Trøndelag\", \n           \"Västernorrland\",\n           \"Jämtland\", \n           \"Møre og Romsdal\",\n           \"Innlandet\", \n           \"Dalarna\", \n           \"Gävleborg\",\n           \"Vestland\", \n           \"Oslo\", \n           \"Viken\", \n           \"Uppsala\",\n           \"Västmanland\",\n           \"Örebro\", \n           \"Värmland\",\n           \"Rogaland\", \n           \"Vestfold og Telemark\",\n           \"Stockholm\", \n           \"Södermanland\", \n           \"Östergötland\", \n           \"Västra Götaland\", \n           \"Agder\", \n           \"Halland\", \n           \"Jönköping\", \n           \"Kalmar\",\n           \"Gotland\", \n           \"Kronoberg\", \n           \"Blekinge\", \n           \"Skåne\"),\n  stringsAsFactors = FALSE\n)\n\n# Maps\n\np_map &lt;- ggplot() +\n  geom_sf(data = counties_ID, \n          fill = \"#FAFAFA\",\n          col = \"lightgrey\",\n          size = 0.5) +\n  geom_sf_text(data = counties_ID, \n               aes(label = ID),\n               col = \"red\",\n               size = 3) +\n  theme_void()\n\np_bar &lt;- counties_wui |&gt; \n  select(NUTS_NAME, name, starts_with(\"pct\")) |&gt; \n  select(-pct_wui) |&gt; \n  pivot_longer(cols = starts_with(\"pct\"), \n               names_to = \"type\",\n               values_to = \"value\") |&gt; \n  mutate(type = str_remove_all(type, \"pct_\"),\n         NUTS_NAME = str_remove_all(NUTS_NAME, \"s län\"),\n         NUTS_NAME = str_remove_all(NUTS_NAME, \" län\")) |&gt; \n  mutate(name = case_when(name == \"corine\" ~ \"C\",\n                          name == \"effis\" ~ \"E\",\n                          name == \"national\" ~ \"N\",\n                          name == \"firEUrisk\" ~ \"F\")) |&gt;\n  mutate(name = factor(name, levels = c(\"N\", \"C\", \"E\", \"F\"))) |&gt; \n  mutate(type = factor(type, levels = c(\"No_wui\", \"Interface\", \"Intermix\"))) |&gt; \n  ggplot() +\n  geom_bar(aes(x = name,\n               y = value,\n               fill = type),\n           col = \"grey\",\n           stat = \"identity\",\n           position = \"fill\"\n           ) +\n  scale_fill_manual(values = c(\"#FAFAFA\", \"#FF6633\", \"#003366\")) +\n  geofacet::facet_geo(~NUTS_NAME,\n                      grid = mygrid, \n                      label = \"code\"\n                      ) +\n  labs(x = \"\",\n       y = \"\") +\n  theme_bw() +\n  theme(\n    strip.text = element_text(size = 9, face = \"bold\")\n  )\n\nggsave(plot = p_map, \n       filename = \"figures/counties_map.png\", \n       width = 3, height = 3)\n\nggsave(plot = p_bar, \n       filename = \"figures/counties_wui_perc.png\", \n       width = 15, height = 20)\n\n\n \nArea of wild vegetation by county (Table 3.4): we calculate the number vegetation cells (i.e., grid centroid is inside the polygon), and calculate the area based on the raster resolution.\n\n\nShow the code\n# Number of buildings by county  ----\ncounty_build_count &lt;- build_counts |&gt; \n  # Number of buildings per county\n  extract(y = vect(counties),\n          fun = \"sum\",\n          na.rm = TRUE,\n          bind = TRUE) |&gt; \n  # sf object\n  st_as_sf() %&gt;% \n  # Area polygons\n  mutate(area = units::set_units(st_area(.), \"km2\"))  |&gt; \n  # Building density by county\n  mutate(build_den = sum/area)\n\n# Percentage vegetation by county ----\n\n# Function for getting vegetation area by counties \nf_pct_veg &lt;- function(df) {\n  df |&gt; # sf object with vegetation data  \n    # Number of cells\n    extract(y = vect(counties),\n            fun = \"sum\",\n            na.rm = TRUE,\n            bind = TRUE) |&gt;  \n    st_as_sf() |&gt; \n    # Area (number cells x area cells)\n    mutate(\n      area_km = wild_veg * ((res(df))[1]/1000 * (res(df ))[2]/1000)\n    ) |&gt; \n    # Get only values \n    st_drop_geometry() |&gt; \n    select(NUTS_NAME, CNTR_CODE, area_km)\n}\n\n\n## Run for each vegetation type\n\n# Effis\neffis_county  &lt;- f_pct_veg(effis_wild_veg) |&gt; \n    rename(area_km_effis = area_km)\n\n# Corine\ncorine_county &lt;- f_pct_veg(corine_wild_veg) |&gt; \n  rename(area_km_corine = area_km)   \n\n# National\nsr16_county &lt;- f_pct_veg(sr16_wild_veg) |&gt; \n  filter(CNTR_CODE  == \"NO\")\nnmd_county  &lt;- f_pct_veg(nmd_wild_veg)  |&gt; \n  filter(CNTR_CODE  == \"SE\")\n\nnational_county &lt;- rbind(sr16_county, nmd_county) |&gt; \n  rename(area_km_national = area_km)\n\n# FirEUrisk\nfirEUrisk_county &lt;- f_pct_veg(firEUrisk_wild_veg) |&gt; \n  rename(area_km_firEUrisk = area_km)   \n\n# Joint tables\ncounty_veg &lt;- national_county |&gt; \n  left_join(corine_county) |&gt; \n  left_join(effis_county) |&gt; \n  left_join(firEUrisk_county)\n\n# Add vegetation to the summary table ----\ndf_summary &lt;- county_build_count |&gt; \n  st_drop_geometry() |&gt; \n  left_join(county_veg) |&gt; \n  mutate(across(.cols = starts_with(\"area_km\"),\n                .fns = ~ 100 * (.x / as.numeric(area)),\n                .names = \"perc_{.col}\"))\n\n# Summary tables by country and county ----\nsummary_country &lt;- df_summary |&gt; \n  select(CNTR_CODE, sum, area, starts_with(\"area_km\")) |&gt; \n  group_by(CNTR_CODE) |&gt; \n  summarise_all(sum) |&gt; \n  mutate(NUTS_NAME = \"Total\",\n         build_den = sum/area) |&gt; \n  mutate(across(.cols = starts_with(\"area_km\"),\n                .fns = ~ 100 * (.x / as.numeric(area)),\n                .names = \"perc_{.col}\")) |&gt; \n  relocate(build_den, .after = area) |&gt; \n  relocate(NUTS_NAME, .after = CNTR_CODE) |&gt; \n  select(CNTR_CODE, NUTS_NAME, area,\n         sum, build_den,\n         starts_with(\"perc\")) |&gt; \n  mutate(area = as.numeric(area),\n         build_den = as.numeric(build_den),\n         CNTR_CODE = case_when(CNTR_CODE == \"NO\" ~ \"NORWAY\",\n                               CNTR_CODE == \"SE\" ~ \"SWEDEN\"))\n  \nsummary_county &lt;- df_summary |&gt; \n  select(CNTR_CODE, NUTS_NAME, area,\n         sum, build_den,\n         starts_with(\"perc\")) |&gt;\n  arrange(CNTR_CODE, NUTS_NAME) |&gt; \n  mutate(area = as.numeric(area),\n         build_den = as.numeric(build_den),\n         CNTR_CODE = case_when(CNTR_CODE == \"NO\" ~ \"NORWAY\",\n                               CNTR_CODE == \"SE\" ~ \"SWEDEN\"))\n\n# Print table ----\nsummary_county |&gt; \n  rbind(summary_country) |&gt; \n  gt(groupname_col = \"CNTR_CODE\",\n     row_group_as_column = FALSE) |&gt; \n  fmt_number(c(build_den, starts_with(\"perc\")), decimals = 1) |&gt; \n  fmt_number(c(sum, area), decimals = 0) |&gt; \n  tab_options(\n      table.font.size = 9,\n      row_group.background.color = \"lightgrey\",\n      row_group.padding = px(1),\n      row_group.font.weight = \"bold\",\n      data_row.padding = px(1)\n    ) |&gt; \n  tab_spanner(\n      label = md(\"**Area covered by vegetation [%]**\"),\n      columns = starts_with(\"perc\")\n    ) |&gt; \n  tab_spanner(\n      label = md(\"**Buildings**\"),\n      columns = c(sum, build_den)\n    ) |&gt; \n  cols_label(\n      NUTS_NAME = md(\"**County**\"),\n      area = md(\"**Area [km2]**\"),\n      sum = md(\"**Count**\"),\n      build_den = md(\"**Density [#/km2]**\"),\n      perc_area_km_national = md(\"**National**\"),\n      perc_area_km_effis = md(\"**Effis**\"),\n      perc_area_km_corine = md(\"**Corine**\"),\n      perc_area_km_firEUrisk = md(\"**FirEurisk**\")\n    ) |&gt; \n  tab_style(\n    style = cell_text(weight = \"bold\"),  # Apply bold text\n    locations = cells_body(\n      rows = c(33, 34)  # specify the row number\n    )\n  )\n\n\n\n\nTable 3.4: Number of buildings and wildland vegetation percentage by county (and total)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCounty\nArea [km2]\n\nBuildings\n\n\nArea covered by vegetation [%]\n\n\n\nCount\nDensity [#/km2]\nNational\nCorine\nEffis\nFirEurisk\n\n\n\n\nNORWAY\n\n\nAgder\n16,428\n259,603\n15.8\n31.4\n73.3\n88.7\n70.3\n\n\nInnlandet\n52,068\n578,860\n11.1\n31.7\n54.6\n83.6\n71.0\n\n\nMøre og Romsdal\n14,973\n218,376\n14.6\n19.3\n48.4\n73.9\n54.8\n\n\nNordland\n37,972\n234,479\n6.2\n14.0\n39.8\n75.1\n62.5\n\n\nOslo\n455\n126,992\n279.2\n42.2\n61.6\n62.0\n64.7\n\n\nRogaland\n9,352\n292,372\n31.3\n16.0\n43.1\n73.0\n49.1\n\n\nTroms og Finnmark\n74,774\n214,686\n2.9\n9.6\n40.5\n83.3\n67.3\n\n\nTrøndelag\n41,480\n396,867\n9.6\n17.7\n49.5\n85.7\n51.7\n\n\nVestfold og Telemark\n17,449\n354,000\n20.3\n37.2\n71.9\n84.6\n67.9\n\n\nVestland\n33,808\n445,690\n13.2\n15.8\n41.8\n72.9\n58.3\n\n\nViken\n24,575\n856,484\n34.9\n38.2\n66.6\n76.9\n68.1\n\n\nTotal\n323,335\n3,978,409\n12.3\n20.8\n49.8\n80.7\n63.5\n\n\nSWEDEN\n\n\nBlekinge län\n3,035\n39,771\n13.1\n71.1\n77.2\n79.4\n78.3\n\n\nDalarnas län\n30,395\n133,328\n4.4\n83.3\n81.4\n89.0\n81.3\n\n\nGotlands län\n3,179\n29,436\n9.3\n49.4\n51.4\n60.1\n52.4\n\n\nGävleborgs län\n19,718\n99,366\n5.0\n84.6\n83.6\n86.3\n86.0\n\n\nHallands län\n5,713\n71,315\n12.5\n61.5\n61.6\n64.8\n65.9\n\n\nJämtlands län\n54,089\n61,508\n1.1\n72.1\n79.6\n89.7\n68.9\n\n\nJönköpings län\n11,745\n77,305\n6.6\n71.4\n71.8\n75.9\n81.1\n\n\nKalmar län\n11,632\n95,119\n8.2\n72.5\n74.0\n78.9\n79.9\n\n\nKronobergs län\n9,430\n59,594\n6.3\n75.8\n76.1\n80.3\n84.1\n\n\nNorrbottens län\n105,907\n104,557\n1.0\n62.7\n71.0\n89.2\n64.6\n\n\nSkåne län\n11,363\n419,353\n36.9\n37.7\n36.8\n42.6\n36.9\n\n\nStockholms län\n7,073\n430,258\n60.8\n58.2\n54.9\n57.6\n53.4\n\n\nSödermanlands län\n7,047\n75,744\n10.7\n55.8\n55.0\n57.0\n60.3\n\n\nUppsala län\n8,618\n106,930\n12.4\n65.7\n63.3\n66.2\n63.6\n\n\nVärmlands län\n21,910\n144,436\n6.6\n71.3\n69.5\n72.6\n74.0\n\n\nVästerbottens län\n59,240\n106,872\n1.8\n78.3\n80.7\n90.7\n76.3\n\n\nVästernorrlands län\n23,070\n124,693\n5.4\n87.8\n85.6\n89.3\n88.3\n\n\nVästmanlands län\n5,689\n50,469\n8.9\n63.7\n59.0\n63.7\n61.6\n\n\nVästra Götalands län\n28,859\n532,163\n18.4\n53.3\n53.9\n57.0\n56.8\n\n\nÖrebro län\n9,687\n103,292\n10.7\n70.0\n69.2\n72.0\n72.0\n\n\nÖstergötlands län\n12,257\n136,359\n11.1\n58.7\n58.9\n61.0\n64.0\n\n\nTotal\n449,657\n3,001,868\n6.7\n69.4\n72.1\n81.0\n70.3\n\n\n\n\n\n\n\n\n\n\n\n3.3.1 Effect distance to large forest\n\n\nShow the code\n# Distance to large forest areas \n\n# Distance variation\nmax_distances &lt;- c(200, 500, 1000, 2000, 2400)\n\n# WUIs\nf_wui &lt;- function(.x, .y){\n  \n  veg_perc &lt;- .x\n  \n  get_wui_raster(.veg_perc = veg_perc,\n                 .veg_dist = .y,\n                 .pot_wui = wui_potential,\n                 .region = region_v)\n  \n}\n\n# Summary table\ntbl_summary_distance &lt;- function(.x){\n\n.x |&gt;\n  as_tibble() |&gt;\n  drop_na() |&gt;\n  pivot_longer(everything(),\n               names_to = \"name\",\n               values_to = \"value\") |&gt;\n  group_by(name, value) |&gt;\n  summarise(count = n()) |&gt;\n  ungroup() |&gt;\n  group_by(name) |&gt;\n  mutate(total = sum(count),\n         pct = 100*count/total) |&gt;\n  pivot_wider(names_from = \"value\",\n              values_from = c(\"count\", \"pct\")) |&gt;\n  mutate(pct_wui = pct_Interface + pct_Intermix) |&gt;\n  select(starts_with(\"pct\")) |&gt;\n  relocate(pct_wui, .after = pct_No_wui) |&gt;\n  mutate(name = factor(name,\n                       levels = c(\"d200\",\n                                  \"d500\",\n                                  \"d1000\",\n                                  \"d2000\",\n                                  \"d2400\"))) |&gt;\n  arrange(name) |&gt;\n  gt(row_group_as_column = TRUE) |&gt;\n  fmt_number(decimals = 1) |&gt;\n  cols_label(\n    name = \"\",\n    pct_No_wui = md(\"**No WUI**\"),\n    pct_Interface = md(\"**Interface**\"),\n    pct_Intermix = md(\"**Intermix**\"),\n    pct_wui = md(\"**Total**\")\n  )  |&gt;\n  tab_spanner(\n    label = md(\"**WUI**\"),\n    columns = c(pct_Interface, pct_Intermix, pct_wui)\n  ) |&gt;\n  tab_options(\n    table.font.size = 9,\n    row_group.padding = px(1),\n    row_group.font.weight = \"bold\",\n    data_row.padding = px(1)\n  )\n\n}\n\n\n\n3.3.1.1 Effis\n\n\nShow the code\n# Raster with distances to large forest (in m)\ndist_path &lt;- \"data/processed_data/effis_wild_veg_large_dist.tif\"\neffis_wild_veg_large_dist &lt;- rast(dist_path)\n\n# Withing the max. distance\neffis_dist_variation&lt;- map2(effis_wild_veg_large_dist, max_distances, get_dist_max)\nnames(effis_dist_variation) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\n\n# Wui vs distance\nwui_effis &lt;- map2(effis_wv_perc,\n                  effis_dist_variation,\n                  f_wui)\nwui_effis &lt;- rast(wui_effis)\nnames(wui_effis) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nset.values(wui_effis)\nterra::saveRDS(wui_effis, \"data/processed_data/wui_effis.rsd\")\n\n# Plot\npanel(wui_effis, axes = FALSE)\n\n\n\n\n\n\n\n\nFigure 3.15: WUI change based on EFFIS fuel map\n\n\n\n\n\n\n\nShow the code\nwui_effis &lt;- terra::readRDS(\"data/processed_data/wui_effis.rsd\")\n\n# Data by country\nwui_effis_no &lt;- mask(wui_effis, no_v)\nwui_effis_se &lt;- mask(wui_effis, se_v)\n\n\n\nShow the code\ntbl_summary_distance(wui_effis_no)\ntbl_summary_distance(wui_effis_se)\n\n\n\n\nTable 3.5: Changes in WUI percentages of WUI by country (EFFIS)\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n85.9\n2.5\n11.6\n14.1\n\n\nd500\n83.6\n4.7\n11.6\n16.4\n\n\nd1000\n83.0\n5.4\n11.6\n17.0\n\n\nd2000\n82.6\n5.8\n11.6\n17.4\n\n\nd2400\n82.5\n5.9\n11.6\n17.5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n93.5\n1.4\n5.2\n6.5\n\n\nd500\n92.1\n2.7\n5.2\n7.9\n\n\nd1000\n91.6\n3.3\n5.2\n8.4\n\n\nd2000\n91.2\n3.6\n5.2\n8.8\n\n\nd2400\n91.1\n3.7\n5.2\n8.9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.1.2 Corine\n\n\nShow the code\n# Raster with distances to large forest (in m)\ndist_path &lt;- \"data/processed_data/corine_wild_veg_large_dist.tif\"\ncorine_wild_veg_large_dist &lt;- rast(dist_path)\n\n# Withing the max. distance\ncorine_dist_variation&lt;- map2(corine_wild_veg_large_dist, max_distances, get_dist_max)\nnames(corine_dist_variation) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\n\n# Wui vs distance\nwui_corine &lt;- map2(corine_wv_perc,\n                   corine_dist_variation,\n                   f_wui)\nwui_corine &lt;- rast(wui_corine)\nnames(wui_corine) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nterra::saveRDS(wui_corine, \"data/processed_data/wui_corine.rsd\")\n\n# Plot\npanel(wui_corine, axes = FALSE)\n\n\n\n\n\n\n\n\nFigure 3.16: WUI change based on CORINE vegetation map\n\n\n\n\n\n\n\nShow the code\nwui_corine &lt;- terra::readRDS(\"data/processed_data/wui_corine.rsd\")\n\n# Data by country\nwui_corine_no &lt;- mask(wui_corine, no_v)\nwui_corine_se &lt;- mask(wui_corine, se_v)\n\n\n\nShow the code\ntbl_summary_distance(wui_corine_no)\ntbl_summary_distance(wui_corine_se)\n\n\n\n\nTable 3.6: Changes in WUI percentages of WUI by country (CORINE)\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n86.9\n2.8\n10.3\n13.1\n\n\nd500\n84.7\n5.0\n10.3\n15.3\n\n\nd1000\n83.8\n5.9\n10.3\n16.2\n\n\nd2000\n83.2\n6.5\n10.3\n16.8\n\n\nd2400\n83.1\n6.6\n10.3\n16.9\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n93.7\n1.6\n4.7\n6.3\n\n\nd500\n92.4\n2.9\n4.7\n7.6\n\n\nd1000\n91.7\n3.6\n4.7\n8.3\n\n\nd2000\n91.3\n4.0\n4.7\n8.7\n\n\nd2400\n91.2\n4.1\n4.7\n8.8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.1.3 National datasets\n\n\nShow the code\n# Norway ----\ndist_path &lt;- \"data/processed_data/sr16_wild_veg_large_dist.tif\"\nsr16_wild_veg_large_dist &lt;- rast(dist_path)\nsr16_dist_variation&lt;- map2(sr16_wild_veg_large_dist, max_distances, get_dist_max)\nnames(sr16_dist_variation) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nwui_sr16 &lt;- map2(sr16_wv_perc, sr16_dist_variation, f_wui)\nwui_sr16 &lt;- rast(wui_sr16)\nnames(wui_sr16) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nterra::saveRDS(wui_sr16, \"data/processed_data/wui_sr16.rsd\")\n\n# Sweden ----\ndist_path &lt;- \"data/processed_data/nmd_wild_veg_large_dist.tif\"\nnmd_wild_veg_large_dist &lt;- rast(dist_path)\nnmd_dist_variation&lt;- map2(nmd_wild_veg_large_dist, max_distances, get_dist_max)\nnames(nmd_dist_variation) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nwui_nmd &lt;- map2(nmd_wv_perc, nmd_dist_variation, f_wui)\nwui_nmd &lt;- rast(wui_nmd)\nnames(wui_nmd) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nterra::saveRDS(wui_nmd, \"data/processed_data/wui_nmd.rsd\")\n\n# Merge datasets ----\nwui_national &lt;- mosaic(wui_sr16, wui_nmd, fun = \"max\") |&gt; \n  add_colours_wui()\n\n# Add names\nnames(wui_national) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nset.values(wui_national)\n# Export\nterra::saveRDS(wui_national, \"data/processed_data/wui_national.rsd\")\n\n# Plot region  \npanel(wui_national, axes = FALSE)\n\n\n\n\n\n\n\n\nFigure 3.17: WUI change based on national vegetation maps\n\n\n\n\n\n\n\nShow the code\nwui_national &lt;- terra::readRDS(\"data/processed_data/wui_national.rsd\")\n\n# Data by country\nwui_national_no &lt;- mask(wui_national, no_v)\nwui_national_se &lt;- mask(wui_national, se_v)\n\n\n\nShow the code\ntbl_summary_distance(wui_national_no)\ntbl_summary_distance(wui_national_se) \n\n\n\n\nTable 3.7: Changes in WUI percentages of WUI by country (national datasets - SR16 & NMD)\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n94.6\n1.6\n3.8\n5.4\n\n\nd500\n92.7\n3.5\n3.8\n7.3\n\n\nd1000\n91.0\n5.2\n3.8\n9.0\n\n\nd2000\n89.2\n7.0\n3.8\n10.8\n\n\nd2400\n88.7\n7.5\n3.8\n11.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n93.7\n1.5\n4.9\n6.3\n\n\nd500\n92.4\n2.7\n4.9\n7.6\n\n\nd1000\n91.6\n3.6\n4.9\n8.4\n\n\nd2000\n90.8\n4.3\n4.9\n9.2\n\n\nd2400\n90.6\n4.5\n4.9\n9.4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.1.4 FirEUrisk\n\n\nShow the code\n# Raster with distances to large forest (in m)\ndist_path &lt;- \"data/processed_data/firEUrisk_wild_veg_large_dist.tif\"\nfirEUrisk_wild_veg_large_dist &lt;- rast(dist_path)\n\n# Withing the max. distance\nfirEUrisk_dist_variation&lt;- map2(firEUrisk_wild_veg_large_dist, max_distances, get_dist_max)\nnames(firEUrisk_dist_variation) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\n\n# Wui vs distance\nwui_firEUrisk &lt;- map2(firEUrisk_wv_perc,\n                   firEUrisk_dist_variation,\n                   f_wui)\nwui_firEUrisk &lt;- rast(wui_firEUrisk)\nnames(wui_firEUrisk) &lt;- c(\"d200\", \"d500\", \"d1000\", \"d2000\", \"d2400\")\nterra::saveRDS(wui_firEUrisk, \"data/processed_data/wui_firEUrisk.rsd\")\n\n# Plot\npanel(wui_firEUrisk, axes = FALSE)\n\n\n\n\n\n\n\n\nFigure 3.18: WUI change based on firEUrisk fuel map\n\n\n\n\n\n\n\nShow the code\nwui_firEUrisk &lt;- terra::readRDS(\"data/processed_data/wui_firEUrisk.rsd\")\n\n# Data by country\nwui_firEUrisk_no &lt;- mask(wui_firEUrisk, no_v)\nwui_firEUrisk_se &lt;- mask(wui_firEUrisk, se_v)\n\n\n\nShow the code\ntbl_summary_distance(wui_firEUrisk_no)\ntbl_summary_distance(wui_firEUrisk_se)\n\n\n\n\nTable 3.8: Changes in WUI percentages of WUI by country (firEUrisk)\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n88.4\n1.9\n9.7\n11.6\n\n\nd500\n86.9\n3.4\n9.7\n13.1\n\n\nd1000\n86.8\n3.5\n9.7\n13.2\n\n\nd2000\n86.6\n3.7\n9.7\n13.4\n\n\nd2400\n86.5\n3.8\n9.7\n13.5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\nd200\n93.8\n1.1\n5.1\n6.2\n\n\nd500\n92.9\n2.1\n5.1\n7.1\n\n\nd1000\n92.8\n2.1\n5.1\n7.2\n\n\nd2000\n92.8\n2.2\n5.1\n7.2\n\n\nd2400\n92.7\n2.2\n5.1\n7.3\n\n\n\n\n\n\n\n\n\n\n\n\n\nAggregate all maps in one figure (Note: data are re-sampled to 500859 cells in the plots)\n\n\nShow the code\n# Plot\np_effis &lt;- ggplot() + \n  geom_spatraster(data = wui_effis, maxcell = 2000000) +\n  facet_wrap(~lyr, ncol = 1) +\n  labs(title = \"Effis\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5))\n  \np_corine &lt;- ggplot() + \n  geom_spatraster(data = wui_corine, maxcell = 2000000) +\n  facet_wrap(~lyr, ncol = 1) +\n  labs(title = \"Corine\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np_national &lt;- ggplot() + \n  geom_spatraster(data = wui_national, maxcell = 2000000) +\n  facet_wrap(~lyr, ncol = 1) +\n  labs(title = \"National\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np_firEUrisk &lt;- ggplot() + \n  geom_spatraster(data = wui_firEUrisk, maxcell = 2000000) +\n  facet_wrap(~lyr, ncol = 1) +\n  labs(title = \"firEUrisk\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np_effis + p_corine + p_national + p_firEUrisk +\n  plot_layout(guides = \"collect\",\n              ncol = 4) \n\n\n\n\n\n\n\n\nFigure 3.19: WUI by vegetation type map and threshold distance\n\n\n\n\n\nPlot variation in the percentage of WUI with the distance to large forest areas by each vegetation/fuel map.\n\n\nShow the code\nget_tbl_pct &lt;- function(.x) {\n  \n  t &lt;- .x |&gt;\n    as_tibble() |&gt; \n    drop_na() |&gt; \n    pivot_longer(everything(),\n                 names_to = \"distance\",\n                 values_to = \"value\") |&gt;\n    group_by(distance, value) |&gt;\n    summarise(count = n()) |&gt;\n    ungroup() |&gt; \n    group_by(distance) |&gt;\n    mutate(total = sum(count),\n           pct = 100*count/total) |&gt; \n    ungroup() |&gt; \n    pivot_wider(names_from = \"value\",\n                values_from = c(\"count\", \"pct\")) |&gt; \n    select(distance, starts_with(\"pct\")) |&gt; \n    mutate(distance = gsub(\"d\", \"\", distance),\n           distance = as.numeric(distance)) |&gt; \n    arrange(distance)\n  \n  return(t)\n  \n}\n\n# Combine rasters\nraster_list &lt;- list(wui_effis_no,\n                    wui_corine_no,\n                    wui_national_no,\n                    wui_firEUrisk_no,\n                    wui_effis_se,\n                    wui_corine_se,\n                    wui_national_se,\n                    wui_firEUrisk_se)   \n\n# Tables with percentages\ndist_list &lt;- raster_list |&gt; purrr::map(get_tbl_pct)\n\n# Add names to de list\nnames(dist_list) &lt;- c(\"Norway_effis\",\n                      \"Norway_corine\",\n                      \"Norway_national\",\n                      \"Norway_firEUrisk\",\n                      \"Sweden_effis\",\n                      \"Sweden_corine\",\n                      \"Sweden_national\",\n                      \"Sweden_firEUrisk\")\n\n# Merge with names\ndist_tbl &lt;- bind_rows(dist_list, .id = \"Ticker\") |&gt; \n  separate(Ticker, c(\"country\", \"vegetation\"))\n\n# add value for 2400 m \nget_tbl_pct_2 &lt;- function(.x){\n  \nt &lt;- .x |&gt;\n  as_tibble() |&gt; \n  drop_na() |&gt; \n  pivot_longer(everything(),\n               names_to = \"vegetation\",\n               values_to = \"value\") |&gt;\n  group_by(vegetation, value) |&gt;\n  summarise(count = n()) |&gt;\n  ungroup() |&gt; \n  group_by(vegetation) |&gt;\n  mutate(total = sum(count),\n         pct = 100*count/total) |&gt; \n  ungroup() |&gt; \n  pivot_wider(names_from = \"value\",\n              values_from = c(\"count\", \"pct\")) |&gt; \n  select(vegetation, starts_with(\"pct\"))\n\nreturn(t)\n\n}\n  \n# Plot\nggplot(data = dist_tbl,\n       aes(x = distance,\n           y = pct_Interface,\n           col = vegetation)) +\n  geom_point() +\n  geom_line() +\n  facet_grid(~country) +\n  labs(x = \"Distance [m]\",\n       y = \"Perc. [%]\"\n       # title = \"Percentage of WUI Interface vs. distance to forest\"\n       ) +\n  theme_bw() +\n  theme(strip.text.x = element_text(size = 12, face = \"italic\"))\n\n\n\n\n\n\n\n\nFigure 3.20: Change in the percentage of WUI with the theshold distance to large forest areas\n\n\n\n\n\n\n\n\n3.3.2 Effect threshold building density\nIn the following figure we can see the distribution of buildings density (#/\\(km^2\\)). The number of buildings in the buffer area is then calculated multiplying the building density by the area of the buffer (i.e., minimum number of buildings (Nmin) = density threshold [#/\\(km^2\\)] * Buffer area [\\(km^2\\)]). In red is the standard threshold for classifying an area as possible WUI, then we have used half of this value (i.e., 3.08 #/\\(km^2\\)), representing approximately 25% of the data. Finally, we have also tested with 1 #/\\(km^2\\), which is equivalent to classified any area with buildings as potential WUI.\n\n\nShow the code\nbuild_focal_no &lt;- mask(build_focal, no_v) \n\nbuild_focal_se &lt;- mask(build_focal, se_v)\n\n# Get density table\n\nget_d_counts &lt;- function(.x) {\n  \n  build_focal |&gt; \n    mask(.x) |&gt; \n    as_tibble() |&gt; \n    drop_na() |&gt; \n    mutate(d_km2 = focal_sum / area_buffer)\n  \n}\n\ndf_counts &lt;- list(no_v, se_v) |&gt; \n  map(get_d_counts) \nnames(df_counts) &lt;- c(\"Norway\", \"Sweden\")\n\ndf_counts_bind &lt;- bind_rows(df_counts, .id = \"country\") \n  \n\n# Create tables with summary statistics to add to the plot\nget_tbl_quantiles &lt;- function(.x) {\n  \n  tbl &lt;- .x |&gt; \n    select(d_km2) |&gt;\n    quantile(prob = seq(0, 1, 0.25), na.rm = T) |&gt;\n    round(2) |&gt; \n    as_tibble() |&gt; \n    rename(d = value) |&gt; \n    mutate(Quantile = c(\"Min\", \"Q1\", \"Median\", \"Q3\", \"Max\"),\n           Quantile = forcats::fct_reorder(Quantile, d)) |&gt; \n    select(Quantile, d)\n  \n  tbl_quantiles &lt;- tibble(x = 2800,\n                          y = 4.0e+5, \n                          table = list(tbl))\n  \n  return(tbl_quantiles)\n  \n}\n\ntbl_quantiles &lt;- df_counts |&gt;\n  map(get_tbl_quantiles) |&gt; \n  bind_rows(.id = \"country\") \n\n\n# Plot\nggplot(df_counts_bind, aes(x = d_km2)) + \n  geom_histogram(bins = 50, color = \"darkblue\", fill = \"lightblue\") +\n  facet_grid(~country) +\n  scale_x_log10() +\n  geom_vline(xintercept = 6.172,\n             linetype = \"dashed\",\n             color = \"red\",\n             linewidth = 1.3) +\n  annotate(\"text\", x = 8, y = 420000,\n           label = \"6.172\", colour = \"red\", parse = TRUE) + \n  geom_vline(xintercept = 3.08,\n             linetype = \"dashed\",\n             color = \"orange\",\n             linewidth = 1.3) +\n  annotate(\"text\", x = 4, y = 420000,\n           label = \"3.08\", colour = \"orange\", parse = TRUE) + \n  geom_vline(xintercept = 1.00,\n             linetype = \"dashed\", \n             color = \"blue\",\n             linewidth = 1.3) +\n  annotate(\"text\", x = 1.1, y = 420000,\n           label = \"1\", colour = \"blue\", parse = TRUE) + \n  labs(title = \"Building density\",\n       x = \"#/km2\",\n       y = \"\") +\n  theme_bw() +\n  theme(legend.key = element_rect(fill = NA),\n        legend.background = element_rect(color = \"gray\", linetype = \"solid\"),\n        legend.position = c(.95, .95),\n        legend.justification = c(\"right\", \"top\"),\n        legend.box.just = \"right\",\n        legend.margin = margin(6, 6, 6, 6),\n        strip.text.x = element_text(size = 12, face = \"italic\")) +\n  # Add tabble with summary statistics\n  ggpp::geom_table(data = tbl_quantiles,\n                   aes(x = x, y = y, label = table),\n                   table.theme = ggpp::ttheme_gtplain(base_size = 12))\n\n\n\n\n\n\n\n\n\nPotential WUI based on different building density:\n\n3.3.2.1 Building density 3.08 #/km2\n\n\nShow the code\n# Minimum number of buildings (N) in the buffer area ----\n# WUI if building density (d) &gt; 6.17 [#/km^2]\n# N = d [#/km^2] * A [km^2]\n# A = pi * radio^2\n\nN_min_3 &lt;- round(3.08 * area_buffer, 3)\n\nwui_potential_3 &lt;- build_focal\nwui_potential_3[wui_potential_3 &lt;= N_min_3] &lt;- NA\nwui_potential_3[wui_potential_3 &gt;  N_min_3] &lt;- 1\n\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(wui_potential_3, axes = F, legend = F, add = T)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# EFFIS\neffis_wui_3 &lt;- get_wui_raster(.veg_perc = effis_wv_perc,\n                              .veg_dist = effis_wild_veg_large_dist_2400,\n                              .pot_wui = wui_potential_3)\n\n# CORINE\ncorine_wui_3 &lt;- get_wui_raster(.veg_perc = corine_wv_perc,\n                               .veg_dist = corine_wild_veg_large_dist_2400,\n                               .pot_wui = wui_potential_3)\n\n# National maps\nsr16_wui_3 &lt;- get_wui_raster(.veg_perc = sr16_wv_perc,\n                             .veg_dist = sr16_wild_veg_large_dist_2400,\n                             .pot_wui = wui_potential_3,\n                             .region = no_v)\n\nnrm_wui_3 &lt;- get_wui_raster(.veg_perc = nmd_wv_perc,\n                            .veg_dist = nmd_wild_veg_large_dist_2400,\n                            .pot_wui = wui_potential_3,\n                            .region = se_v)\n\nnational_wui_3 &lt;- mosaic(sr16_wui_3, nrm_wui_3, fun = \"max\") |&gt; \n  add_colours_wui()\n\n# firEUrisk\nfirEUrisk_wui_3 &lt;- get_wui_raster(.veg_perc = firEUrisk_wv_perc,\n                                  .veg_dist = firEUrisk_wild_veg_large_dist_2400,\n                                  .pot_wui = wui_potential_3)\n\n# Put all rasters in one \nwui_r_3 &lt;- c(effis_wui_3, corine_wui_3, national_wui_3, firEUrisk_wui_3)\nnames(wui_r_3) &lt;- c(\"effis\", \"corine\", \"national\", \"firEUrisk\")\n\nterra::saveRDS(wui_r_3, \"data/processed_data/wui_r_3.rds\")\n\n\nMap of WUI areas (Figure 3.21; Table 3.9).\n\n\nShow the code\nwui_r_3 &lt;- terra::readRDS(\"data/processed_data/wui_r_3.rds\")\n\n\n\nShow the code\nf_plot &lt;- function(.x){ plot(.x, \n                             axes = F, \n                             mar = c(0, 0, 0, 0),\n                             legend = \"topleft\")  }\n\nf_plot(wui_r_3$effis)\nf_plot(wui_r_3$corine)\nf_plot(wui_r_3$firEUrisk)\nf_plot(wui_r_3$national)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) EFFIS\n\n\n\n\n\n\n\n\n\n\n\n(b) CORINE\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) FirEUrisk\n\n\n\n\n\n\n\n\n\n\n\n(d) National databases\n\n\n\n\n\n\n\nFigure 3.21: WUI maps of Norway based on different fuel/vegetation maps (resolution of 250 x 250 m)\n\n\n\n\nShow the code\n# Summary WUI by country\nwui_r_3_no &lt;- mask(wui_r_3, no_v)\nwui_r_3_se &lt;- mask(wui_r_3, se_v)\n\n# summary table \ntbl_summary_vegetation(wui_r_3_no)\ntbl_summary_vegetation(wui_r_3_se)\n\n\n\n\nTable 3.9: Percentages of WUI by vegetation\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\ncorine\n79.7\n7.3\n13.0\n20.3\n\n\neffis\n79.0\n6.3\n14.8\n21.0\n\n\nfirEUrisk\n83.7\n4.4\n12.0\n16.3\n\n\nnational\n86.5\n8.4\n5.1\n13.5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\ncorine\n89.3\n4.5\n6.1\n10.7\n\n\neffis\n89.2\n4.2\n6.7\n10.8\n\n\nfirEUrisk\n91.0\n2.5\n6.5\n9.0\n\n\nnational\n88.7\n5.0\n6.3\n11.3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.2.2 Building density 1 #/km2\nEquivalent to select any area with building as potential WUI.\n\n\nShow the code\n# Minimum number of buildings (N) in the buffer area ----\n# WUI if building density (d) &gt; 6.17 [#/km^2]\n# N = d [#/km^2] * A [km^2]\n# A = pi * radio^2\n\nN_min_1 &lt;- round(1.00 * area_buffer, 3)\n\nwui_potential_1 &lt;- build_focal\nwui_potential_1[wui_potential_1 &lt;= N_min_1] &lt;- NA\nwui_potential_1[wui_potential_1 &gt;  N_min_1] &lt;- 1\n\nplot(region_r, col = \"lightgrey\", axes = F, legend = F)\nplot(wui_potential_1, axes = F, legend = F, add = T)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# EFFIS\neffis_wui_1 &lt;- get_wui_raster(.veg_perc = effis_wv_perc,\n                              .veg_dist = effis_wild_veg_large_dist_2400,\n                              .pot_wui = wui_potential_1)\n\n# CORINE\ncorine_wui_1 &lt;- get_wui_raster(.veg_perc = corine_wv_perc,\n                               .veg_dist = corine_wild_veg_large_dist_2400,\n                               .pot_wui = wui_potential_1)\n\n# National maps\nsr16_wui_1 &lt;- get_wui_raster(.veg_perc = sr16_wv_perc,\n                             .veg_dist = sr16_wild_veg_large_dist_2400,\n                             .pot_wui = wui_potential_1,\n                             .region = no_v)\n\nnrm_wui_1 &lt;- get_wui_raster(.veg_perc = nmd_wv_perc,\n                            .veg_dist = nmd_wild_veg_large_dist_2400,\n                            .pot_wui = wui_potential_1,\n                            .region = se_v)\n\nnational_wui_1 &lt;- mosaic(sr16_wui_1, nrm_wui_1, fun = \"max\") |&gt; \n  add_colours_wui()\n\n# firEUrisk\nfirEUrisk_wui_1 &lt;- get_wui_raster(.veg_perc = firEUrisk_wv_perc,\n                                  .veg_dist = firEUrisk_wild_veg_large_dist_2400,\n                                  .pot_wui = wui_potential_1)\n\n# Put all rasters in one \nwui_r_1 &lt;- c(effis_wui_1, corine_wui_1, national_wui_1, firEUrisk_wui_1)\nnames(wui_r_1) &lt;- c(\"effis\", \"corine\", \"national\", \"firEUrisk\")\n\nterra::saveRDS(wui_r_1, \"data/processed_data/wui_r_1.rds\")\n\n\nMap of WUI areas (Figure 3.22; Table 3.10).\n\n\nShow the code\nwui_r_1 &lt;- terra::readRDS(\"data/processed_data/wui_r_1.rds\")\n\n\n\nShow the code\nf_plot &lt;- function(.x){ plot(.x, \n                             axes = F, \n                             mar = c(0, 0, 0, 0),\n                             legend = \"topleft\")  }\n\nf_plot(wui_r_1$effis)\nf_plot(wui_r_1$corine)\nf_plot(wui_r_1$firEUrisk)\nf_plot(wui_r_1$national)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) EFFIS\n\n\n\n\n\n\n\n\n\n\n\n(b) CORINE\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) FirEUrisk\n\n\n\n\n\n\n\n\n\n\n\n(d) National databases\n\n\n\n\n\n\n\nFigure 3.22: WUI maps of Norway based on different fuel/vegetation maps (resolution of 250 x 250 m)\n\n\n\n\nShow the code\n# Summary WUI by country\nwui_r_1_no &lt;- mask(wui_r_1, no_v)\nwui_r_1_se &lt;- mask(wui_r_1, se_v)\n\n# Tables\ntbl_summary_vegetation(wui_r_1_no)\ntbl_summary_vegetation(wui_r_1_se)\n\n\n\n\nTable 3.10: Percentages of WUI by vegetation\n\n\n\n\n\n\n\n\n\n\n(a) Norway\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\ncorine\n72.5\n8.8\n18.6\n27.5\n\n\neffis\n71.4\n6.9\n21.8\n28.6\n\n\nfirEUrisk\n77.5\n5.6\n16.9\n22.5\n\n\nnational\n82.0\n10.2\n7.8\n18.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Sweden\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo WUI\n\n\n\n\n\nWUI\n\n\n\n\n\n\n\nInterface\n\n\n\n\nIntermix\n\n\n\n\nTotal\n\n\n\n\n\n\ncorine\n86.0\n5.3\n8.6\n14.0\n\n\neffis\n85.8\n4.9\n9.3\n14.2\n\n\nfirEUrisk\n88.0\n3.0\n8.9\n12.0\n\n\nnational\n85.4\n5.8\n8.8\n14.6\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlot all together\n\n\nShow the code\np_1 &lt;- ggplot() + \n  geom_spatraster(data = wui_r) +\n  facet_wrap(~lyr, nrow = 1) +\n  labs(title = \"d = 1.00 #/km2\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np_3.08 &lt;- ggplot() + \n  geom_spatraster(data = wui_r) +\n  facet_wrap(~lyr, nrow = 1) +\n  labs(title = \"d = 3.08 #/km2\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5))\n\np_6.17 &lt;- ggplot() + \n  geom_spatraster(data = wui_r) +\n  facet_wrap(~lyr, nrow = 1) +\n  labs(title = \"d = 6.17 #/km2\") +\n  theme_void() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n# NOTE: geom_spatraster change the resolution of the map\np_1 / p_3.08 / p_6.17 +\n  plot_layout(guides = \"collect\") \n\n\n\n\n\n\n\n\nFigure 3.23",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R scripts</span>"
    ]
  },
  {
    "objectID": "article_codes.html#effect-distance-to-large-forest-1",
    "href": "article_codes.html#effect-distance-to-large-forest-1",
    "title": "3  R scripts",
    "section": "4.1 Effect distance to large forest",
    "text": "4.1 Effect distance to large forest\nGet if the grid to which the wildfire is located was defined as WUI.\n\n\nShow the code\n# Detect wui class for each point (wildfire)\nextract_wui &lt;- function(.x) { extract(.x, wf) }\n\nwf_wui &lt;- list(wui_effis, wui_corine, wui_national, wui_firEUrisk) |&gt; \n  map(extract_wui) |&gt; \n  map(as_tibble)\nnames(wf_wui) &lt;- c(\"effis\", \"corine\", \"national\", \"firEUrisk\")\n\n# Tables with counts of wildfire in each WUI class\nf_counts &lt;- function(.x) {\n  .x |&gt; \n  pivot_longer(-ID) |&gt; \n  count(name, value) |&gt; \n  mutate(name = factor(name, \n                       levels = c(\"d200\",\n                                  \"d500\",\n                                  \"d1000\",\n                                  \"d2000\",\n                                  \"d2400\"),\n                       ordered = T)) |&gt;\n  arrange(name) |&gt; \n  pivot_wider(names_from = name,\n              values_from = n) |&gt; \n  mutate(across(.cols = starts_with(\"d\"),\n                .fns = ~ 100 * (.x / sum(.x)),\n                .names = \"perc_{.col}\"))\n  \n} \n\nwf_wui_counts &lt;- wf_wui |&gt;\n  map(f_counts) |&gt; \n  # Merge with names\n  bind_rows(.id = \"vegetation\") \n\n# Print table\nwf_wui_counts |&gt; \n  # select(\"vegetation\", \"value\", starts_with(\"perc\")) |&gt; \n  gt(groupname_col = \"vegetation\",\n     row_group_as_column = FALSE) |&gt; \n  fmt_number(columns = starts_with(\"perc\"),\n             decimals = 1) |&gt; \n  cols_label(\n    vegetation = \"\",\n    value = md(\"**WUI class**\"),\n    perc_d200 = md(\"**d200**\"),\n    perc_d500 = md(\"**d500**\"),\n    perc_d1000 = md(\"**d1000**\"),\n    perc_d2000 = md(\"**d2000**\"),\n    perc_d2400 = md(\"**d2400**\")\n  )  |&gt; \n  cols_label_with(fn = function(x) {\n    janitor::make_clean_names(x, case = \"title\") |&gt;\n      tolower() |&gt;\n      stringr::str_replace_all(\"^|$\", \"**\") |&gt;\n      md()\n  }) |&gt; \n  tab_spanner(\n    label = md(\"**Percentage**\"),\n    columns = starts_with(\"perc\")\n  ) |&gt; \n  tab_spanner(\n    label = md(\"**Count**\"),\n    columns = starts_with(\"d\")\n  ) |&gt; \n  tab_options(\n    table.font.size = 9,\n    row_group.background.color = \"lightgrey\",\n    row_group.padding = px(1),\n    row_group.font.weight = \"bold\",\n    data_row.padding = px(1)\n  ) \n\n\n\n\nTable 4.1: Percentage of wildfires in each WUI class\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwui class\n\nCount\n\n\nPercentage\n\n\n\nd200\nd500\nd1000\nd2000\nd2400\nd200\nd500\nd1000\nd2000\nd2400\n\n\n\n\neffis\n\n\nNo_wui\n226\n185\n166\n159\n156\n64.6\n52.9\n47.4\n45.4\n44.6\n\n\nInterface\n34\n75\n94\n101\n104\n9.7\n21.4\n26.9\n28.9\n29.7\n\n\nIntermix\n90\n90\n90\n90\n90\n25.7\n25.7\n25.7\n25.7\n25.7\n\n\ncorine\n\n\nNo_wui\n231\n191\n177\n165\n162\n66.0\n54.6\n50.6\n47.1\n46.3\n\n\nInterface\n41\n81\n95\n107\n110\n11.7\n23.1\n27.1\n30.6\n31.4\n\n\nIntermix\n78\n78\n78\n78\n78\n22.3\n22.3\n22.3\n22.3\n22.3\n\n\nnational\n\n\nNo_wui\n242\n213\n206\n191\n184\n69.1\n60.9\n58.9\n54.6\n52.6\n\n\nInterface\n45\n74\n81\n96\n103\n12.9\n21.1\n23.1\n27.4\n29.4\n\n\nIntermix\n63\n63\n63\n63\n63\n18.0\n18.0\n18.0\n18.0\n18.0\n\n\nfirEUrisk\n\n\nNo_wui\n234\n211\n211\n211\n211\n66.9\n60.3\n60.3\n60.3\n60.3\n\n\nInterface\n28\n51\n51\n51\n51\n8.0\n14.6\n14.6\n14.6\n14.6\n\n\nIntermix\n88\n88\n88\n88\n88\n25.1\n25.1\n25.1\n25.1\n25.1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R scripts</span>"
    ]
  },
  {
    "objectID": "article_codes.html#effect-threshold-building-density-1",
    "href": "article_codes.html#effect-threshold-building-density-1",
    "title": "3  R scripts",
    "section": "4.2 Effect threshold building density",
    "text": "4.2 Effect threshold building density\n\n\nShow the code\nwui_r_1 &lt;- terra::readRDS(\"data/processed_data/wui_r_1.rds\")\nwui_r_3 &lt;- terra::readRDS(\"data/processed_data/wui_r_3.rds\")\nwui_r &lt;- terra::readRDS(\"data/processed_data/wui_r.rds\")\n\n\n\n\nShow the code\n# Detect wui class for each point (wildfire)\nextract_wui &lt;- function(.x) { extract(.x, wf) }\n\nwf_wui_bd &lt;- list(wui_r_1, wui_r_3, wui_r) |&gt; \n  map(extract_wui) |&gt; \n  map(as_tibble)\nnames(wf_wui_bd) &lt;- c(\"bd_1\", \"bd_3\", \"bd_6\")\n\n# Tables with counts og the N. wildfire in each wui class\nf_counts &lt;- function(.x) {\n  .x |&gt; \n  pivot_longer(-ID) |&gt; \n  count(name, value) |&gt; \n  mutate(name = factor(name, \n                       levels = c(\"effis\",\n                                  \"corine\",\n                                  \"national\",\n                                  \"firEUrisk\"),\n                       ordered = T)) |&gt;\n  arrange(name) |&gt; \n  pivot_wider(names_from = name,\n              values_from = n) |&gt; \n  mutate(across(.cols = -value,\n                .fns = ~ 100 * (.x / sum(.x)),\n                .names = \"perc_{.col}\"))\n  \n} \n\n\nwf_wui_bd_counts &lt;- wf_wui_bd |&gt;\n  map(f_counts) |&gt; \n  # Merge with names\n  bind_rows(.id = \"threshold\") \n\n# Print table\nwf_wui_bd_counts |&gt; \n  mutate(definition = case_when(\n    threshold == \"bd_1\" ~ \"threshold = 1.00 #/km2\",\n    threshold == \"bd_3\" ~ \"threshold = 3.08 #/km2\",\n    threshold == \"bd_6\" ~ \"threshold = 6.17 #/km2\"\n  )) |&gt; \n  select(-threshold) |&gt; \n  gt(groupname_col = \"definition\",\n     row_group_as_column = FALSE) |&gt; \n  fmt_number(columns = starts_with(\"perc\"),\n             decimals = 1) |&gt; \n  cols_label(\n    definition = \"\",\n    value = md(\"**WUI class**\"),\n    effis = md(\"**effis**\"),\n    corine = md(\"**corine**\"),\n    national = md(\"**national**\"),\n    firEUrisk = md(\"**firEUrisk**\"),\n    perc_effis = md(\"**effis**\"),\n    perc_corine = md(\"**corine**\"),\n    perc_national = md(\"**national**\"),\n    perc_firEUrisk = md(\"**firEUrisk**\")\n  )  |&gt; \n  tab_spanner(\n    label = md(\"**Percentage**\"), columns = starts_with(\"perc\")\n  ) |&gt; \n  tab_spanner(\n    label = md(\"**Count**\"), columns = c(effis, corine, national, firEUrisk)) |&gt; \n  tab_options(\n    table.font.size = 9,\n    row_group.background.color = \"lightgrey\",\n    row_group.padding = px(1),\n    row_group.font.weight = \"bold\",\n    data_row.padding = px(1)\n  ) \n\n\n\n\nTable 4.2: Percentage of wildfires in WUI calss based on building density threshold\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWUI class\n\nCount\n\n\nPercentage\n\n\n\neffis\ncorine\nnational\nfirEUrisk\neffis\ncorine\nnational\nfirEUrisk\n\n\n\n\nthreshold = 1.00 #/km2\n\n\nNo_wui\n115\n121\n142\n171\n32.9\n34.6\n40.6\n48.9\n\n\nInterface\n110\n115\n109\n59\n31.4\n32.9\n31.1\n16.9\n\n\nIntermix\n125\n114\n99\n120\n35.7\n32.6\n28.3\n34.3\n\n\nthreshold = 3.08 #/km2\n\n\nNo_wui\n137\n143\n165\n193\n39.1\n40.9\n47.1\n55.1\n\n\nInterface\n105\n111\n104\n51\n30.0\n31.7\n29.7\n14.6\n\n\nIntermix\n108\n96\n81\n106\n30.9\n27.4\n23.1\n30.3\n\n\nthreshold = 6.17 #/km2\n\n\nNo_wui\n156\n162\n184\n211\n44.6\n46.3\n52.6\n60.3\n\n\nInterface\n104\n110\n103\n51\n29.7\n31.4\n29.4\n14.6\n\n\nIntermix\n90\n78\n63\n88\n25.7\n22.3\n18.0\n25.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnderson, Hal E. 1982. “Aids to Determining Fuel Models for Estimating Fire Behavior.” INT-GTR-122. Ogden, UT: U.S. Department of Agriculture, Forest Service, Intermountain Forest; Range Experiment Station. https://doi.org/10.2737/INT-GTR-122.\n\n\nAragoneses, Elena, Mariano Garcia, and Emilio Chuvieco. 2022. “FirEUrisk_europe_fuel_map: European Fuel Map at 1 Km Resolution.” e-cienciaDatos. https://doi.org/10.21950/YABYCN.\n\n\nBar-Massada, Avi. 2021. “A Comparative Analysis of Two Major Approaches for Mapping the Wildland-Urban Interface: A Case Study in California.” Land 10 (7): 679. https://doi.org/10.3390/land10070679.\n\n\nBar-Massada, Avi, Susan I. Stewart, Roger B. Hammer, Miranda H. Mockrin, and Volker C. Radeloff. 2013. “Using Structure Locations as a Basis for Mapping the Wildland Urban Interface.” Journal of Environmental Management 128 (October): 540–47. https://doi.org/10.1016/j.jenvman.2013.06.021.\n\n\nEFFIS. 2017. “European Forest Fire Information System (EFFIS) - European Fuel Map, 2017, Based on JRC Contract Number 384347 on the ‘Development of a European Fuel Map’.” European Commission.\n\n\nStewart, Susan I., Volker C. Radeloff, Roger B. Hammer, and Todd J. Hawbaker. 2007. “Defining the Wildland–Urban Interface.” Journal of Forestry 105 (4): 201–7. https://doi.org/10.1093/jof/105.4.201.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>R scripts</span>"
    ]
  }
]